<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>景蓝的小屋</title>
    <link>https://yurik.cafe/</link>
    
    <atom:link href="https://yurik.cafe/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Yurik&#39;s Lab</description>
    <pubDate>Tue, 23 Apr 2024 15:42:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>「随笔」这世界有那么多人</title>
      <link>https://yurik.cafe/2024/thought-memories/</link>
      <guid>https://yurik.cafe/2024/thought-memories/</guid>
      <pubDate>Sun, 03 Mar 2024 01:49:26 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;这世界有那么个人，活在我飞扬的青春&lt;br&gt;在泪水里浸湿过的长吻，常让我想啊想出神&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再一次听到这首歌，还是不自觉的跟唱。&lt;/p&gt;
&lt;p&gt;上高中两年了，还是总会想到初中的事。与我小升初时转入另一个的学区不同，上</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>这世界有那么个人，活在我飞扬的青春<br>在泪水里浸湿过的长吻，常让我想啊想出神</p></blockquote><p>再一次听到这首歌，还是不自觉的跟唱。</p><p>上高中两年了，还是总会想到初中的事。与我小升初时转入另一个的学区不同，上了高中的我还是能见到他们，打招呼，是一件刻在骨子里的习惯。</p><p>我可能是一个私下里比较感性的，对于分别，我是难以接受的。但通过互联网能再次阅读他们的文字，体会他们表达的感情，是一件很奇妙的事。</p><p>『这世界有那么多人』总让我想到分别。</p><p>早先国 V 刚刚开始起步，彩虹社与 B 站成立了 VirtuaReal。B 站对 VR 的一期生做了很多宣发，我大抵是当时关注<strong>爹</strong>的，后来就躺在我的关注列表里，一直没看过了。重新记起爹是因为「我开动物园那些年」的 OP 和「<a href="https://www.bilibili.com/video/BV1SE411V78E/">夭夭</a>」，而重新看爹的直播&#x2F;录播是因为她当时打 Apex 和 MC，迷于爹的「琉声电台」。当时的「琉声电台」是我初二时每天写完作业的哄睡音频。</p><p>初三时因为学校的安排，班级从走读转为住校，一同告别的便是每日都可以接触到的手机与电脑。当时求了我妈一个多月，才终于同意给我买了一块 Oppo Watch 2，小小的安卓表，让我与学校围墙外的世界重新建立了联系，也让我得知了那个紫发女孩毕业了。</p><blockquote><p>弹幕：好像去 VR 做 Ru 爹的同事啊。 Ru：（沉默）也有可能到时候我就是你的前同事了。</p></blockquote><p>当然，互联网也不是杳无音讯，那段时间，我不记得听了多少次<a href="https://www.bilibili.com/video/BV14j411f79e">初号机的告别视频《再见》</a>和这一首女水友唱的<a href="https://www.bilibili.com/video/BV1H3411h7mN">《这世界那么多人》</a></p><p>当时正值中考前，可能人也变得伤感了吧。与朋友的分别，D 的管人的毕业，组成了这首歌留在记忆里的画面。</p><p>心中感慨良多，却难以写出，诸君权当一笑尔。</p><blockquote><p>看管人不要入脑。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2024/thought-memories/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「重要」站点Icon变更通知</title>
      <link>https://yurik.cafe/2024/new-avatar/</link>
      <guid>https://yurik.cafe/2024/new-avatar/</guid>
      <pubDate>Thu, 29 Feb 2024 01:05:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;站点公告&lt;/strong&gt; 本站于 2024 年 2 月 29 日零时启用新的 icon 并将其 URL 地址迁回至站点源地址。&lt;/p&gt;
&lt;p&gt;烦请各位友站将原先的 unpkg 源地址修改为新地址。&lt;/p&gt;
&lt;p&gt;仅需将原先地址中的 &lt;code&gt;https:</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>站点公告</strong> 本站于 2024 年 2 月 29 日零时启用新的 icon 并将其 URL 地址迁回至站点源地址。</p><p>烦请各位友站将原先的 unpkg 源地址修改为新地址。</p><p>仅需将原先地址中的 <code>https://unpkg.com/yurik-static@1.0.6/</code> 修改为本站地址 <code>https://yurik.cafe</code> 即可</p><p>如 <code>https://unpkg.com/yurik-static@1.0.6/favicon/v2/favicon.ico</code> -&gt; <code>https://yurik.cafe/favicon/v2/favicon.ico</code></p><p>icon 列表及对应地址可查看 <a href="/favicon/v2/">&#x2F;favicon&#x2F;v2&#x2F;</a></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/announces/">站点公告</category>
      
      
      
      <comments>https://yurik.cafe/2024/new-avatar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「游戏开发」我的小鲨鱼 By Unity</title>
      <link>https://yurik.cafe/2024/warma-shark-unity/</link>
      <guid>https://yurik.cafe/2024/warma-shark-unity/</guid>
      <pubDate>Sat, 24 Feb 2024 21:25:15 GMT</pubDate>
      
      <description>创意、美术: WARMA | 《我的小鲨鱼》的 UNITY 实现</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h1><blockquote><p>本游戏创意、美术来源于 B 站知名 UP 主 Warma。本作仅为原游戏的 Unity 实现，未经原作者与本人许可不得用于商业用途</p></blockquote><p>创意、美术: <strong>Warma</strong> | 开发：<strong>景蓝 Yurik</strong></p><p><strong>《我的小鲨鱼》的 UNITY 实现</strong></p><p><a href="https://www.bilibili.com/video/BV1fb4y1P7Y1">原视频</a></p><iframe src="//player.bilibili.com/player.html?aid=624026347&bvid=BV1fb4y1P7Y1&cid=1414155015&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p>来领养一只电子小鲨鱼吧！<br>给它喂食、让它锻炼、看它睡觉，这一切看起来就像治愈快乐的宠物养成游戏一样。<br>尽管小鲨鱼是弱小的，面对一切都是无能为力的。<br>但请放心，无论发生了什么，电子小鲨鱼仍然爱你。<br>游戏总共包含 11 个普通结局和 2 个最终结局，根据你对小鲨鱼做过的事情，游戏将走向不同的结局。<br>来和小鲨鱼成为朋友吧！</p><p><img src="/2024/warma-shark-unity/cover.jpg"></p><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><ul><li>2024&#x2F;2&#x2F;19 - 制作了语言选择页面</li></ul><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>当前游戏还未开发好</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/projects/">项目</category>
      
      
      <category domain="https://yurik.cafe/tags/Unity/">Unity</category>
      
      <category domain="https://yurik.cafe/tags/game-dev/">游戏开发</category>
      
      
      <comments>https://yurik.cafe/2024/warma-shark-unity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用 Hexo 搭建静态博客</title>
      <link>https://yurik.cafe/2024/hexo-guidebook-1/</link>
      <guid>https://yurik.cafe/2024/hexo-guidebook-1/</guid>
      <pubDate>Sun, 18 Feb 2024 02:33:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想到年，我曾经写过「&lt;a href=&quot;/2022/hugo-blog/&quot;&gt;使用 Hugo 搭建个人博客&lt;/a&gt;」一文，现在又来转投 Hexo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想到年，我曾经写过「<a href="/2022/hugo-blog/">使用 Hugo 搭建个人博客</a>」一文，现在又来转投 Hexo 的怀抱了。</p><h1 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h1><p>Hexo 是一款基于 Node.js 的静态博客框架，它具有轻量、快速、简洁且高效的特点。它可以将 Markdown 语法转换为 HTML，方便用户编写博客文档。Hexo 支持使用 node 命令进行一键部署到 GitHub Pages、Heroku 或其他平台，非常适合个人博客的搭建。此外，Hexo 还具有丰富的插件和主题，可以满足用户的不同需求。</p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Hexo 依赖于 Node.js 环境，因此确保你的计算机已经安装了 Node.js 和 npm (同时你也可以使用 yarn 来管理你的 Node.js 包)</p><h2 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h2><p>hexo-cli 是 Hexo 官方的命令行管理工具，它提供了快速新建、发布、部署博客等功能。</p><p>你可以通过 npm（或 yarn，下文不再赘述）安装 hexo-cli</p><p>在终端中执行以下命令来安装 hexo-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm</span><br>npm install hexo-cli -g<br><br><span class="hljs-comment"># yarn</span><br>yarn global add hexo-cli<br></code></pre></td></tr></table></figure><blockquote><p>我们将提供 npm 和 yarn 的命令，请根据你的情况选择<br>下同</p></blockquote><h1 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h1><h2 id="生成站点目录"><a href="#生成站点目录" class="headerlink" title="生成站点目录"></a>生成站点目录</h2><p>接下来，你需要创建一个新的 Hexo 博客项目。在终端或命令提示符中，导航到你想要创建博客的目录，然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init folder<br></code></pre></td></tr></table></figure><p>其中 folder 改为目标文件夹名称（下同），如果在当前文件夹初始化的话就执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init .<br></code></pre></td></tr></table></figure><p>此时目标文件夹中会生成以下文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tree">.<br>│  .gitignore              # git提交时的省略文件<br>│  package.json            # Node.js项目描述和依赖管理文件<br>│  _config.landscape.yml   # Hexo 初始主题 Landscape 的配置文件<br>│  _config.yml             # Hexo 站点配置文件<br>│<br>├─scaffolds                # Hexo生成文章时的结构模板<br>│      draft.md<br>│      page.md<br>│      post.md<br>├─source                   # Hexo站点源文件<br>│  └─_posts                # 博文文件夹<br>│          hello-world.md<br>├─themes                   # 主题文件夹<br>│       .gitkeep           # 告诉git要保留这个空文件夹<br>│<br>├─node_modules             # Node.js 依赖包存放<br>│<br>└─.github                  # 使用Github来自动部署Hexo的配置文件<br></code></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><h3 id="进入站点文件夹"><a href="#进入站点文件夹" class="headerlink" title="进入站点文件夹"></a>进入站点文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> folder<br></code></pre></td></tr></table></figure><h3 id="使用包管理器安装-Node-js-依赖包"><a href="#使用包管理器安装-Node-js-依赖包" class="headerlink" title="使用包管理器安装 Node.js 依赖包"></a>使用包管理器安装 Node.js 依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm</span><br>npm i<br><br><span class="hljs-comment">#yarn</span><br>yarn<br></code></pre></td></tr></table></figure><h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><h2 id="config-yml-配置"><a href="#config-yml-配置" class="headerlink" title="_config.yml 配置"></a>_config.yml 配置</h2><p>进入你创建的博客文件夹，你将看到一个名为_config.yml 的文件，这是 Hexo 的配置文件。你可以根据自己的需求修改该文件，例如设置博客标题、域名、文章路径等。</p><p>参数详解请参考<a href="//hexo.io/zh-cn/docs/configuration">Hexo 官方文档</a></p><h2 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h2><p><code>package.json</code> 是 Node.js 项目描述和依赖管理文件，你可以在 <code>package.json</code> 中添加以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;g&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo deploy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样使用以下语句就可以逐条执行 <code>清理静态文件-&gt;生成静态文件-&gt;部署开发服务器</code>三个过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm run s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn s<br></code></pre></td></tr></table></figure><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>在站点根目录使用终端，执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post &lt;your-post-name&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;your-post-name&gt;</code>修改为你的文章名称（英文）</p><p>之后在<code>source\_posts\&lt;你的自定义路径&gt;\</code>中将会生成<code>&lt;your-post-name&gt;.md</code>文件，使用 Markdown 语法编辑即可开始写作</p><h1 id="渲染-HTML-文档"><a href="#渲染-HTML-文档" class="headerlink" title="渲染 HTML 文档"></a>渲染 HTML 文档</h1><p>若你已经按照<a href="#package-json-%E9%85%8D%E7%BD%AE">上文</a>配置了<code>package.json</code>文件，你可以执行以下命令来生成静态 HTML 文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm run g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn g<br></code></pre></td></tr></table></figure><p>当然你也可以手动执行 Hexo 命令来逐步生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清理原public文件(必须)</span><br>hexo clear       # hexo cl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成静态文档</span><br>hexo generate    # hexo g<br></code></pre></td></tr></table></figure><p>生成的静态文档将出现在目录下<code>public</code>文件夹中，你可以将它上传至你的网页服务器或者 gh-pages 等 serverless 服务中</p><h1 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h1><h2 id="开启文章资源文件夹"><a href="#开启文章资源文件夹" class="headerlink" title="开启文章资源文件夹"></a>开启文章资源文件夹</h2><p>Hexo 默认不开启文章资源文件夹，所有的图片都直接读取<code>source</code>文件夹中的非<code>_</code>开头目录中文件，这并不方便图片管理。</p><p>你可以在<code>_config.yml</code>中将<code>post_asset_folder</code>设置为<code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当在 <code>post_asset_folder</code> 为 <code>true</code> 时，Hexo 会在你创建新文章时自动生成一个与文章同名的文件夹。</p><p>在 Markdown 文件中引用图片时，你可以使用相对路径来指向这个文件夹中的图片文件。例如，如果你有一张名为 <code>image.jpg</code> 的图片放在 <code>my-article</code> 文件夹中，你可以在 <code>my-article.md</code> 文件中使用 <code>![](image.jpg)</code> 的语法来引用这张图片。</p><p>通过使用 <code>post_asset_folder</code> 功能，你可以更好地组织和管理 Hexo 博客中的文章和资源，提高写作和发布的效率。</p><div class="alert alert-danger" role="alert">  如果你要配置封面时不可以使用上文提及的相对路径，而是应该使用相对站点根目录的路径，如<code>/my-article/image.jpg</code></div><h2 id="配置文章存储路径"><a href="#配置文章存储路径" class="headerlink" title="配置文章存储路径"></a>配置文章存储路径</h2><p>Hexo 默认将所有文章全部存放在<code>source\_posts</code>下，这并不利于按时间管理文章</p><p>你可以在<code>_config.yml</code>中修改<code>new_post_name</code>设置来设置文章存放路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year/:month/:title.md</span><br></code></pre></td></tr></table></figure><p>相关变量请参考<a href="//hexo.io/zh-cn/docs/permalinks">Hexo 官方文档</a></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>你可以为自己的 Hexo 站点安装不同的主题，具体主题配置请参考相关主题文档</p><p><a href="//hexo.io/themes/">Hexo 主题列表</a></p><h1 id="Enjoy-Your-Writing"><a href="#Enjoy-Your-Writing" class="headerlink" title="Enjoy Your Writing"></a>Enjoy Your Writing</h1><p>:D</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://yurik.cafe/tags/Hexo/">Hexo</category>
      
      <category domain="https://yurik.cafe/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
      
      <category domain="https://yurik.cafe/tags/%E5%BB%BA%E7%AB%99/">建站</category>
      
      
      <comments>https://yurik.cafe/2024/hexo-guidebook-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「项目」Hexo 主题 News 现已上线</title>
      <link>https://yurik.cafe/2024/hexo-theme-news/</link>
      <guid>https://yurik.cafe/2024/hexo-theme-news/</guid>
      <pubDate>Thu, 01 Feb 2024 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2024/hexo-theme-news/banner.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所见，我给博客换上了一个新主题。&lt;/p&gt;
&lt;p&gt;与别的主题不同的是，这个主题是我从 1 开始制作的。为什么是从 1 开始？因为这个主题我参考了 &lt;a href=&quot;h</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2024/hexo-theme-news/banner.webp"></p><p>如你所见，我给博客换上了一个新主题。</p><p>与别的主题不同的是，这个主题是我从 1 开始制作的。为什么是从 1 开始？因为这个主题我参考了 <a href="https://www.apple.com.cn/newsroom/">Apple 公司的 Newsroom 页面</a>，也使用了部分 Apple 的 CSS 样式表（主要是文字相关部分），因此这个主题也被我命名为<strong>News「新闻中心」</strong>。这篇博文是制作<strong>News「新闻中心」</strong>主题的记录。</p><h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>最开始的想法是在给班级网站写新闻中心页面。当时给网站主页使用的 Bootstrap 5 的 Jumbotron 模板，想着设计一个和他向契合的新闻页面，突然我想到了之前看到的 Apple Newsroom 我十分喜欢，于是便用 Bootstrap 的 Card 放置了一个差不多的页面出来，这可以称为是<strong>News「新闻中心」</strong>的 <strong>α1</strong> 测试版本。</p><blockquote><p>此处因保护隐私原因不放出参考网址</p></blockquote><p>之后这个站点便因为准备期考而暂停了更新，但我仍时不时的对他的样式表做一点细微的调整，直到期考结束。期考结束的这个寒假，我按照计划维护着博客，突发奇想要不把之前写的「新闻中心」改成主题吧！</p><p><strong>说干就干</strong></p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>我使用的是 <a href="https://www.npmjs.com/package/yo">YO(Yeoman generators) 生成器</a>来创建的 Hexo 主题模板，使用的 EJS 模板语言和 CSS 样式表，具体的技术细节就不再文中赘述了。我感觉主题的开发就和使用 PHP 写程序一样，要注重代码的<strong>“复用”</strong>，即模块化编程，将不同的组件单独编写，按需调用，省去了重复造轮子的麻烦。</p><p>目前，<strong>News「新闻中心」</strong>已经实现了以下功能：</p><ul><li>基础文章的渲染</li><li>友情链接页面</li></ul><p>计划实现的功能：</p><ul><li>灯箱 Fancybox</li><li>完善配置文件</li><li>代码高亮</li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p><strong>News「新闻中心」</strong>具有以下特性：</p><ul><li>使用了最新的 Bootstrap 5 作为框架，「新闻中心」支持其全部组件和特性</li></ul><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>以下项目在 Newsroom 开发时提供了无可取代的帮助，特在此表达诚挚的谢意（排名不分先后）</p><ul><li><p>设计灵感和部分 CSS 代码来自：<a href="//apple.com.cn">Apple Inc.</a></p></li><li><p>导航栏动画来自：<a href="https://nero978.top/">Nero978</a> | <a href="https://github.com/Miracle-Town/mt-web">Miracal Town&#x2F;mt-web</a></p></li><li><p>Hexo 主题启蒙，提供了部分样式和脚本代码：<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a></p></li><li><p>默认随机封面图来自我使用的第一个博客主题：<a href="https://github.com/BigCoke233/miracles">BigCoke233&#x2F;Miracles</a></p></li></ul><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><div class="alert alert-danger" role="alert">  警告：<b>News「新闻中心」</b>因个人原因无限期停止开发。</div><a href="https://github.com/ImJingLan/hexo-theme-news" target="_blank" type="button" class="btn btn-outline-dark btn-lg w-100" ><i class="bi bi-github"></i> ImJingLan/hexo-theme-news</a>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/projects/">项目</category>
      
      
      <category domain="https://yurik.cafe/tags/Hexo/">Hexo</category>
      
      <category domain="https://yurik.cafe/tags/Hexo-%E4%B8%BB%E9%A2%98/">Hexo 主题</category>
      
      
      <comments>https://yurik.cafe/2024/hexo-theme-news/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用 GitHub Actions 部署 Hexo</title>
      <link>https://yurik.cafe/2024/github-action-depoly-hexo/</link>
      <guid>https://yurik.cafe/2024/github-action-depoly-hexo/</guid>
      <pubDate>Mon, 15 Jan 2024 17:53:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近把博客从 Vercel 迁移到了 Netlify 了，这两家都是 ServerLess 部署平台，属于完全的无痛迁移了。&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近把博客从 Vercel 迁移到了 Netlify 了，这两家都是 ServerLess 部署平台，属于完全的无痛迁移了。</p><p>无论是 Vercel 还是 Netlify，都对于应用的部署时长有限制，但相对与 Vercel 免费的每月 6000 分钟来说，Netlify 的 300 分钟就略显寒酸了。但自从去年国庆我的网站挂在 Vercel 被墙外加最近 Vercel 访问不畅之后我就在研究 Netlify 了。</p><p>因为直接上传 NPM 包到 Netlify 上部署相比上传静态的 HTML 页面更耗时间，而我最近学习了 Github Actions，Github Actions 提供了每月 3000 分钟的部署时长，因此决定使用 Github Actions 来构建静态页面，之后仅同步静态页面到 Netlify 就完成了。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>首先在仓库中新建一个 deploy 分支用于存放构建完成的静态页面。</p><p>别忘了在 <strong>Setting - Actions - General - Workflow permissions</strong> 中将权限设置为 <code>Read and write permissions</code></p><p>在仓库主分支下的<code>.github/workflows/</code>文件夹新建一个 yml 文件，名称随意，如<code>deploy.yml</code></p><p>随后在 yml 文件下写入以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">部署静态页面到</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">分支</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment">#手动触发</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 获取源码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">迁出代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装node.js环境</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装Hexo-cli</span> <span class="hljs-string">和</span> <span class="hljs-string">其他</span> <span class="hljs-string">node</span> <span class="hljs-string">环境</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">构建静态页面</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm run g</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">你也可以在这里执行更多Linux命令</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo Example</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">推送到</span> <span class="hljs-string">deploy</span> <span class="hljs-string">分支</span> <span class="hljs-comment"># 部署</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@v4.3.3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">deploy</span> <span class="hljs-comment"># 部署后提交到的分支</span><br>          <span class="hljs-attr">folder:</span> <span class="hljs-string">public</span> <span class="hljs-comment"># 打包好的目录名称</span><br></code></pre></td></tr></table></figure><p>最后 Push 到 Github 就好啦</p><p>别忘了把 Netlify 中的链接仓库重新绑定到 deploy 分支噢</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2024/github-action-depoly-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」我的PHP开发之路</title>
      <link>https://yurik.cafe/2024/my-way-to-php/</link>
      <guid>https://yurik.cafe/2024/my-way-to-php/</guid>
      <pubDate>Wed, 10 Jan 2024 17:45:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;新年已至，自然少不了元旦 Party，今年是我们在高中的第一个元旦派对，当然要做一些不一样的。&lt;/p&gt;
&lt;p&gt;作为班上的网管，我做了一个在线</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新年已至，自然少不了元旦 Party，今年是我们在高中的第一个元旦派对，当然要做一些不一样的。</p><p>作为班上的网管，我做了一个在线的新年祝福页面，让同学们可以在上面填写自己的新年祝福，并在新年时随机分发到每个人的手中（账号上）。</p><p>这一套站点拥有完善的登录、鉴权和还在开发（咕）中的后台管理面板和现代化的前台。</p><p>如这篇文章的标题所示，这次开发的技术栈便是 MySQL 和 PHP。当然，我并不想在这里赘述该系统的开发过程，而是记录一下我的 PHP 开发 &amp; 学习过程。</p><p><img src="/2024/my-way-to-php/1.webp" alt="新年祝福页面"></p><h2 id="初识-PHP"><a href="#初识-PHP" class="headerlink" title="初识 PHP"></a>初识 PHP</h2><p>我的第一个 PHP 小程序至今还躺在我的 Gitee 仓库中（虽然现在已经不用 Gitee 了&#x3D;V&#x3D;），那是一个简单的文件上传程序。当时还是初中，作为网管（对的，我一直是网管），老师让我负责收集同学们的假期实践作业。改作业要求使用 Word 软件进行排版和上传。</p><p>当时的我，刚刚有了一台虚拟主机，出于 QQ 接收文件可能会遗漏且不好统计的想法，我从网上复制&amp;&amp;修改了一段上传&amp;保存文件的 PHP 代码，并上传到了虚拟主机上，当时这个程序使我收集的工作更加便捷，当然虚拟主机的龟速也引来不少同学的友好反馈（笑）。</p><p>作为第一个 PHP 程序，大部分代码都是从网上 Copy &amp; Paste 下来的。因为 PHP 的大部分语法和之前为 NOIP 学习的 C++十分相像，我对程序做了一点修改，添加了格式校验和提交检测功能。</p><p>这便是我的 PHP 基础。</p><p><img src="/2024/my-way-to-php/2.webp" alt="作业提交系统的Commit"></p><h2 id="你好-MySQL"><a href="#你好-MySQL" class="headerlink" title="你好, MySQL"></a>你好, MySQL</h2><p>在我早期的观念中，PHP 和数据库一定密不可分，只是当时偷懒外加没有需求，在作业收集网站后我就再也没有写过 PHP 代码了。而一个站点的出现，让我重拾 PHP 并完成了第一个大项目，那就是<a href="https://zigzagk.top/OIerdictum/">机房大佬语录</a>。</p><p>受到<a href="https://hitokoto.cn/">一言</a> 和 <a href="https://zigzagk.top/OIerdictum/">机房大佬语录</a>的影响，我也想自己搭建一个所谓的“一句话站点”，但苦于没有找到合适的开源项目，于是我决定：</p><p><strong>自己写！</strong></p><p>于是我通过<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程</a>照猫画虎地学习了 MySQL 创建表，插入语句，更新语句等操作，经过几个月地努力，写出了一个还算像点样地随机语句程序 『一句』 <a href="https://github.com/ImJingLan/Sentence">ImJingLan&#x2F;Sentence</a></p><p><img src="/2024/my-way-to-php/3.webp" alt="一句 Logo"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>学习一种新技术主要来自于你对他的需求，只有有了需求，你才有往下学的动力。多看看开源社区，多看看别人的代码，多看文档，哪怕 Copy Paste 呢？</p><p>我的 PHP 代码风格主要受到 Sakura Panle 的影响，这种模块的思路贯彻在了我的所有站点中。</p><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2024/my-way-to-php/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「站点公告」RimeWave.News 现已可用！</title>
      <link>https://yurik.cafe/2023/rimewave-news-is-available/</link>
      <guid>https://yurik.cafe/2023/rimewave-news-is-available/</guid>
      <pubDate>Mon, 06 Nov 2023 16:18:24 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;RimeWave.top 现已停止运营&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RimeWave.News 现已可用！&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&quot;https://rimewave.top/?module=news&quot;&gt;https://r</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>RimeWave.top 现已停止运营</p></blockquote><p>RimeWave.News 现已可用！</p><p>访问 <a href="https://rimewave.top/?module=news">https://rimewave.top/?module=news</a> 了解更多</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/announces/">站点公告</category>
      
      
      
      <comments>https://yurik.cafe/2023/rimewave-news-is-available/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「杂谈」Counter-Strike 2 : 未来已来，时不我待</title>
      <link>https://yurik.cafe/2023/hello-counter-strike-2/</link>
      <guid>https://yurik.cafe/2023/hello-counter-strike-2/</guid>
      <pubDate>Thu, 28 Sep 2023 20:34:21 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;Counter-Strike、Counter-Strike 2、CS:GO 以及它们各自的标识是 Valve Corporation 的商标和&amp;#x2F;或注册商标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;北京时间 2023 年 9 月 28 </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Counter-Strike、Counter-Strike 2、CS:GO 以及它们各自的标识是 Valve Corporation 的商标和&#x2F;或注册商标。</p></blockquote><p>北京时间 2023 年 9 月 28 日 凌晨 4:40 , <strong>Valve Corporation（V 社）</strong>发布了<strong>反恐精英：全球攻势</strong>（下称 CSGO）有史以来最大的更新</p><p>全新的<strong>反恐精英 2</strong>（下称为 CS2）覆盖了原先的 CSGO 页面，预示着内测 6 个月的 CS2 正式取代 CSGO，称为下一代反恐精英系列游戏</p><p>与 反恐精英 1.6（CS1.6）、反恐精英:起源（CSS）、CSGO 之间的更新不同，本次更新中 V 社直接使用过 CS2 覆盖了原先 CSGO 的页面，这意味着玩家将无法同时游玩 CS2 与 CSGO。不过你依然可以通过游戏属性-&gt;测试版-&gt; <strong>csgo_demo_viewer - 1.38.7.9</strong> 来启动 CSGO</p><p>今天这篇文章，咱们不聊 CS2，而是聊聊我与 CS 的故事，权当一篇琐记吧</p><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>我玩的第一款 FPS，就是 CS 了。那时候我 5 岁，我哥便带我玩 CSOL（虐我）。当时主要是打一些大灾变之类的生化模式。有一次，我哥问我知不知道 Steam，我还记得他还提了一嘴：“知不知道 CSGO？”那年，我 10 岁</p><p>缘分总是很巧，第二年，2017 年，我忽然想起了这款游戏，便去网上搜索了一下。那时候，CSGO 国服刚刚开始内测。</p><p>我大概是第二批国服内测玩家，在游玩了几天国服之后，我又花钱购买了国际服的优先（那时候 CSGO 还是一个付费游戏）。</p><p>后来，我对于他的兴趣渐渐消失，逐渐的，他便成为我 Steam 库中静静的一员。</p><p>直到初一。</p><h1 id="重逢"><a href="#重逢" class="headerlink" title="重逢"></a>重逢</h1><p>小学，吃鸡的风潮席卷全球，大伙都在聊着绝地求生，CSGO 却默默无闻。</p><p>初中，也尝试着和朋友一起玩 PUBG，有一日，他突然问我打不打 CSGO。</p><p>一发不可收拾。</p><p>我不知道自己打了多少局白银段的对局，也不知道自己起过多少次<strong>内格夫</strong>和 <strong>PP-野牛</strong>。但是从此之后，我再也没放下他。</p><p>我买了人生中第一款皮肤。</p><p>很早的时候，我曾经掉落过一把皮肤，但我天真的以为如果我装备了皮肤，他的磨损值会不断下降，直到完全磨损。因此 2019 年之前我从来没用过皮肤。</p><p>从初一打到高二，虽然中途有短暂的退游，却依旧在电脑上保留着他，他成为了我和朋友交流的一大方式。我依旧记得段位机制更新后我升上黄金的感动；在 Nuke 打出 1V5 残局队友的赞美（<a href="https://www.bilibili.com/video/BV1aM411i7Tw">点我去看</a>）</p><p>我买过很多把刀，但都是比较普通的折叠刀。2023 年春节，我下定决心，花了 1980 元买了一把<strong>折叠刀 | 多普勒 （崭新出厂）[Phase 1]</strong></p><p>后来，又陆续地添置了印花集 UPS、沙漠之鹰和一个手套。</p><p><img src="/2023/hello-counter-strike-2/The-Teenagers-First-Knife.jpg" alt="&quot;The Teenagers&#39; First Knife&quot;"></p><h1 id="明天-，后天-？"><a href="#明天-，后天-？" class="headerlink" title="明天 _ _ _ ，后天 _ _ _ ？"></a>明天 _ _ _ ，后天 _ _ _ ？</h1><p>2023 年 3 月 23 日，V 社公布了基于起源二引擎打造的 CS2。</p><p>你要问我，那一日我记忆犹新的，居然是皮肤交易市场。年初我 1980 买的刀，一夜之间涨到 4000 元（求购）。</p><p>随后就是长时间地等待资格，实际上直到最后一次大规模发放资格时我才收到了邀请。</p><p>游玩了一段时间的 CS2，感觉枪械手感、Sub-Tick 等的调教有待加强，不过谁还不是 1.6 遗老了呢？</p><p><img src="/2023/hello-counter-strike-2/limitest.webp" alt="CS2 Limit Test"></p><h1 id="永远怀念"><a href="#永远怀念" class="headerlink" title="永远怀念"></a>永远怀念</h1><p>或许我有些矫情，但我昨晚熬夜到 1 点，等着 CS2 的发布。但当我早上起来，看见库中的<strong>Counter-Strike : Global Offensive</strong> 变成了 <strong>Counter-Strike 2</strong>。看着 CSGO 国服发的<a href="https://www.bilibili.com/video/BV1PC4y1o7So">《这，就是反恐精英》</a>，依旧感觉有些许伤感。</p><blockquote><p>我们终会理解那些依旧在玩 1.6 的人</p></blockquote><p>时代在进步，技术在发展。一款 11 年前的游戏终将被取代。11 年，不长，但是一个人的青春。11 年，有多少人在等着起源二的上线呢？11 年，后天也变成了今天。一眼之间，我们已迈入全新的战场。</p><p>2018 年 10 月 4 日，一个不知名的小网站，上传了一篇名为<a href="https://www.rushb.net/csgo-update-2018-10-4.html">《CSGO 2018 年 10 月 4 日更新日志【人物重制】》</a>的文章</p><p>从此，这个网站就记录了 CSGO 的所有更新记录、地图彩蛋、选手配置、地图推荐，直到</p><p>嗨，B 哥，今天 CS2 上线了，你在那边见到了吗？</p><p><img src="/2023/hello-counter-strike-2/rip_rushb.webp" alt="R.I.P. - RushB"></p><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%9D%82%E8%B0%88/">杂谈</category>
      
      
      
      <comments>https://yurik.cafe/2023/hello-counter-strike-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」写一篇博客吧</title>
      <link>https://yurik.cafe/2023/miscellanies-2/</link>
      <guid>https://yurik.cafe/2023/miscellanies-2/</guid>
      <pubDate>Sat, 16 Sep 2023 17:33:04 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;你们这些孩子哪里是真为了写博客。&lt;/p&gt;
&lt;p&gt;你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。&lt;/p&gt;
&lt;p&gt;—— dboy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开篇聊聊天&quot;&gt;&lt;a href=&quot;#</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>你们这些孩子哪里是真为了写博客。</p><p>你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。</p><p>—— dboy</p></blockquote><h1 id="开篇聊聊天"><a href="#开篇聊聊天" class="headerlink" title="开篇聊聊天"></a>开篇聊聊天</h1><p>2018 年，可能是我捣鼓这些站点的起点，<code>imjinglan.cn</code>这个域名，是我注册的第一个域名，也是我第一个博客的地址。</p><p>正如我开头所引用的话一样，那是一个不断尝试的年级，Wordpress、Typecho 都试过，还用过更多的主题。重装了很多次站点。</p><p>众多博客，却没有留下一点记忆，所写的文章如今早已没有了印象。</p><p>自 2022 年 2 月 10 日，我使用 Hugo 搭建静态博客，再到 2023 年使用 Hexo 重构了现在的博客，已经过去了 583 天，该纪录保持至今</p><p>今日突发奇想，写一篇文章，聊聊博客本身</p><h1 id="保持写作"><a href="#保持写作" class="headerlink" title="保持写作"></a>保持写作</h1><p>我是怎么保持写博客的习惯的？说实话，<strong>我也不知道</strong></p><p>我喜欢炫耀，和别人炫耀我的博客。尽管这样子引流屁用没有 QAQ。但这样做我就会记得我有个博客（这很重要！）</p><p>其次，博客文章最重要的就是选题，自己的博客当然想写啥就写啥了。在学校的时候我喜欢拿着一个小笔记本在上面记着我的文章草稿，周末回家了直接照着打就好了</p><h1 id="一些写作小习惯"><a href="#一些写作小习惯" class="headerlink" title="一些写作小习惯"></a>一些写作小习惯</h1><p>在写博客中，我也养成了一些自认为比较好的书写习惯，分享给大家</p><ol><li><p>对于中文引号，我更加偏向于使用直角引号<strong>「」『』</strong>，这样在屏幕阅读中会更加易读</p></li><li><p>除了需要多张截图的技术文章，我基本坚持了每个一级标题末放一张图的习惯（如 <a href="/2023/ipod-classic-review">『iPod Classic 上手』</a> 和 <a href="/2023/YGR-Raft">『Raft 木筏评测』</a> ），这种方法使得行文阅读更加连续</p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这个博客大概会一直写下去的吧。。。是吧。。</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2023/miscellanies-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「开箱」iPod Classic 上手 : 优雅永不过时</title>
      <link>https://yurik.cafe/2023/ipod-classic-review/</link>
      <guid>https://yurik.cafe/2023/ipod-classic-review/</guid>
      <pubDate>Thu, 14 Sep 2023 18:15:53 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;终于下定决心写这篇文章了, 截至文章截稿，iPod Classic 陪着我走完了艰难的初三时光。随着我进入高中，每日骑车上学，iPod Cl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>终于下定决心写这篇文章了, 截至文章截稿，iPod Classic 陪着我走完了艰难的初三时光。随着我进入高中，每日骑车上学，iPod Classic 也成为了我背包的必备单品。</p><p>回想起来，似乎我从没有为他写过一篇评测（或许以前有过，但当他不存在吧）</p><p>虽然 iPod Classic 可以通过刷 Rockbox 达到原系统做不到的效果，但本文更想偏重于原版系统的体验</p><h1 id="精心设计，浑然天成"><a href="#精心设计，浑然天成" class="headerlink" title="精心设计，浑然天成"></a>精心设计，浑然天成</h1><p>一块金属正面，一块亮面不锈钢背板，中间镶嵌着 Click Wheel 和一块 2.5 英寸的 LCD 彩色显示屏，这便是我手上的 iPod Classic</p><p>我选择的是黑色的版本，沉稳，耐用是我对它的感受</p><p>尽管乔布斯说：「每一台 iPod 的划痕都是独一无二的」，我还是给他的背壳贴上了一层保护膜，以及一块早已被磨花的亚克力外壳（还好不是不锈钢边框）</p><p><img src="/2023/ipod-classic-review/IMG_0008.jpg" alt="iPod Classic 背板，贴上了一层保护膜"></p><h1 id="你好-Click-Wheel"><a href="#你好-Click-Wheel" class="headerlink" title="你好, Click Wheel !"></a>你好, Click Wheel !</h1><p>或许你已经久仰大名，但当你第一次上手时仍会感到这项设计的精妙。一转一点，刷新了人们对于音乐的理解。</p><p>在普通 MP3 只有几 MB 存储容量时，iPod 拥有惊人的 5GB 容量，而我手上的 iPod Classic 经过改装竟然可以高达 160GB，足以装下你一生中所有的歌曲。</p><p>那么传统的按键式列表操作便不再合适。于是圆盘 Click Wheel 便诞生了，可以说 iPod 的大容量成就了 Click Wheel，Click Wheel 也成就了 iPod</p><p>如果你需要切换项目，只需要将手指放在圆环上，轻轻转动，便可以看见项目的切换，配合着 iPod Classic 模拟的音效，好似实体的段落感的感觉是一种全新的操作体验</p><p>搭配 Cover Flow，你还可以实现类似于在多张专辑中挑选心仪唱片的感觉</p><p><img src="/2023/ipod-classic-review/IMG_0001.jpg" alt="Cover Flow"></p><h1 id="需要适应的音频管理方式"><a href="#需要适应的音频管理方式" class="headerlink" title="需要适应的音频管理方式"></a>需要适应的音频管理方式</h1><p>让我们请出 iTunes!</p><p>苹果将把音乐导入 iPod 的行为称为 「同步」，你需要先将音乐拖进 iTunes 中后再同步才能将音乐导入到 iPod 中。同时现在许多主流格式居然不支持，如 FLAC</p><p>我一般会使用 foobar2000 将所有格式转换为 <a href="https://macosforge.github.io/alac/">Apple Lossless Audio Codec (ALAC)</a> 格式后导入</p><p>不同于网络上他人对这个特性的吐槽，我个人还是比较喜欢使用 iTunes 的，他使得我整理专辑更加高效了</p><p>需要注意的是，如果你是导入本地音频的话，更换计算机或者重装系统后在新设备上同步将会<strong>失去旧设备同步的所有歌曲！注意备份！</strong></p><p>我一般是通过家庭存储服务器搭配 Syncthing 同步管理歌曲</p><p><img src="/2023/ipod-classic-review/IMG_0002.jpg" alt="iTunes"></p><h1 id="戴上耳机，倾听她"><a href="#戴上耳机，倾听她" class="headerlink" title="戴上耳机，倾听她"></a>戴上耳机，倾听她</h1><p>作为一款数字音乐播放器，怎么能错过音乐？</p><p>iPod Classic 的是一台简单易用的前端，也是捆绑的主力之一。在日常出行中，即使不用外置解码器也十分出色。最高 32Ω 的阻抗足以推动大部分耳机</p><p>我手上的这台 iPod Classic 改装了固态硬盘，在快速读取音乐的同时塞进了更大的电池。</p><p>我每日上下学骑车时都会使用它，如果注意不使用时暂停播放（当你拔出耳机时会自动暂停，但我有时会误触），可以使用两个月之久。连续播放时长估计在 30 小时左右</p><p>纯粹的听歌体验，没有续航焦虑，这些都使得 iPod 成为了我外出时的必备单品</p><p><img src="/2023/ipod-classic-review/IMG_0006.jpg" alt="iPod Classic"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>「如果计算机成为一个中心，还可以使便携式设备变得更简单。」</strong></p><p>2000 年左右，乔布斯着手用苹果电脑打入音乐市场，推出了 iTunes 音乐软件，所有苹果电脑用户可以免费使用该软件，而这仅仅是推动数字中枢战略的第一步。</p><p>下一步便是制造一个便携式音乐播放器。乔布斯意识到，苹果可以设计一个和 iTunes 配套的设备，让收听音乐变得更加简单。由计算机来完成复杂的任务，而音乐播放器的功能要简单。iPod 因此而诞生了。</p><p>iPod 代表了苹果品牌的核心价值——诗意与工程紧密相连，艺术、创意和科技完美结合，设计风格既醒目又简洁。</p><p>如果你问我：「<strong>2023 年了,iPod Classic 还值得买吗？</strong>」</p><p>我会回答：「<strong>如果你想，买下他吧，别忘了享受音乐</strong>」</p><p><img src="/2023/ipod-classic-review/banner.png" alt="iPod Classic"></p><blockquote><p>写于 2023 年 9 月 14 日 , 柳州</p></blockquote>]]></content:encoded>
      
      
      
      
      <comments>https://yurik.cafe/2023/ipod-classic-review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」将博客主页封面修改为随机图片</title>
      <link>https://yurik.cafe/2023/fluid-random-index-img/</link>
      <guid>https://yurik.cafe/2023/fluid-random-index-img/</guid>
      <pubDate>Tue, 12 Sep 2023 12:27:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Fluid 是一款很好用的 Hexo 主题，但他默认的主页封面并不能做到多张图片随机。于是我决定魔改他&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Fluid 是一款很好用的 Hexo 主题，但他默认的主页封面并不能做到多张图片随机。于是我决定魔改他</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>通过查看 <code>layout/index.ejs</code> 文件可以看出 index_img 的定义为<code>index_img = post.cover || theme.post.default_cover</code></p><p>我们只需要将 <code>theme.post.default_cover</code> 改为数字外加随机数取出就好了</p><p>而 ejs 支持 js 的 Math.random 语法，稍微学习 Javascript 就可以修改了</p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>进入 <code>主题文件夹/layout</code>，打开<code>index.ejs</code></p><p>搜索 <code>theme.post.default_cover</code></p><p>将其修改成 <code>theme.post.default_cover[Math.floor(Math.random() * (theme.post.default_cover.length))]</code></p><p>修改 Fluid 的配置文件 <strong>_config.fluid.yml</strong></p><p>将 <strong>default_index_img</strong> 配置项修改为这样</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">default_index_img:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">此处为图片链接</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">此处为图片链接</span><br></code></pre></td></tr></table></figure><p>重新部署就好啦！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我同时也修改了 Fluid 的封面命名规则，这样子只需要设置一次封面属性就可以同时应用到 index_img 和 banner_img 啦</p><p><del>我也将修改后的主题改名为 Farbic 开源在 Github 仓库中 <strong>Rabbit-Clan&#x2F;hexo-theme-farbic</strong>，欢迎 Star + Fork</del></p><p><del>Farbic 主题还重新修改了部分页面的配置方式，使配置方式更加直观</del></p><p><del>只是还没来得及编写文档，可能安装后会出现无法使用的情况</del></p><p>2023.09.14 : 由于技术原因，暂时不单独提供修改的主题，您可以前往本博客仓库自行克隆后提取</p><p><strong>修改后的主题仍遵循 GPL 协议公开！</strong></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2023/fluid-random-index-img/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「YGR」Raft 木筏 - 你也想在海上捡垃圾吗</title>
      <link>https://yurik.cafe/2023/YGR-Raft/</link>
      <guid>https://yurik.cafe/2023/YGR-Raft/</guid>
      <pubDate>Sun, 10 Sep 2023 12:33:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2023/YGR-Raft/cover.webp&quot; alt=&quot;《Raft木筏》&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;有趣的物资收集系统&quot;&gt;&lt;a href=&quot;#有趣的物资收集系统&quot; class=&quot;headerlink&quot; title=&quot;有趣的物资收集系统&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2023/YGR-Raft/cover.webp" alt="《Raft木筏》"></p><h1 id="有趣的物资收集系统"><a href="#有趣的物资收集系统" class="headerlink" title="有趣的物资收集系统"></a>有趣的物资收集系统</h1><p>在木筏中，玩家出生时将会获得一个塑料勾。通过塑料勾你可以勾取到漂在洋面的材料：木板、塑料、棕榈叶等等，海面上还会刷新出包含隐藏物资的木桶，里面包含着较为丰富的奖励（当然这也取决于你是否幸运）</p><p>塑料勾和金属勾同时也是在海底挖掘矿石、石头的工具</p><p>当你较为深入地游玩 Raft 后，你会学习如何制作 <strong>收集网</strong> 。收集网将会帮你自动拾取网下的物品，你只需要定期清理即可</p><p>于此同时，游戏中还存在着鱼竿、斧头、铲子等工具，你可以使用它们来钓鱼（也有可能是臭皮靴），砍伐岛上的树木、挖取污泥等</p><p><img src="/2023/YGR-Raft/screenshot_1.jpg" alt="收集网"></p><h1 id="基于地点转换的剧情"><a href="#基于地点转换的剧情" class="headerlink" title="基于地点转换的剧情"></a>基于地点转换的剧情</h1><p>当你在海上茫无目的的漂荡时，你可能会在木桶中获得 <strong>接收器</strong> 和 <strong>天线</strong> 的蓝图，当你按照要求连接好天线（这个过程是自动的）后，你的接收器上将会出现一个信号点，这便是你所要探索的第一个剧情区域</p><p>当你探索玩一个区域后，你将会获得一个写着一串四位数字的纸条，按照纸条上的数字调整接收器，便可以根据信号指引到下一个区域</p><p><img src="/2023/YGR-Raft/screenshot_2.jpg" alt="接收器"></p><h1 id="丰富的探索元素"><a href="#丰富的探索元素" class="headerlink" title="丰富的探索元素"></a>丰富的探索元素</h1><p>每一个剧情区域都有丰富的探索元素。在探索路上，你将会见到很多字条，捡起字条后会自动播放相关语音。通过这些语音，你或许可以理解关于剧情的一些细节</p><p>除此之外，信号塔后的剧情区域都十分巨大，无论是大篷车镇还是唐加罗瓦号，在其中探索将会花费你大量的时间，注意！</p><p>在航行的过程中，接收器上也会出现一些蓝色的小点，这些便是大型岛屿上的交易站，在其中你可以通过交易获得高级鱼饵及一些稀有物品！</p><p>交易站中没有 NPC，但你可以让你的朋友钻入其中并截图，这很有趣！</p><p><img src="/2023/YGR-Raft/screenshot_10.jpg" alt="交易站"></p><h1 id="强大的建筑系统"><a href="#强大的建筑系统" class="headerlink" title="强大的建筑系统"></a>强大的建筑系统</h1><p>你可以随心所欲地修建你的木筏！你可以把它改造成一艘巨轮，也可以天马行空地搭建出一个只有 4 块底板的天空之城。</p><p>木筏给玩家提供了丰富的材质，如木板、高级木板（这个消耗材料更多）、棕榈叶。同时，你还可以使用刷子给自己的墙体上漆（颜料需要通过花朵与染料厂获取）</p><p>各种自动化的设备（你后期甚至可以建造全自动净化器）使你的木筏化身全能海上城市。你还可以在船上搭建自己的种植园</p><p><img src="/2023/YGR-Raft/screenshot_4.jpg" alt="我们的木筏"></p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>木筏是一款好游戏，他也非常适合朋友间进行联机游玩，但我们认为他还是存在一些缺点</p><ol><li><p><strong>存在穿模、卡入地底等 BUG。</strong></p><p>有一次游玩时，在乘坐唐加罗瓦电梯时我们突然掉入电梯下方空间，无法操作，只能通过生命值减少来重生，同时我们也丧失了我们大部分物资</p></li><li><p><strong>部分物件摆放有待加强</strong></p><p>我们还是期待如管道可穿墙（虽然这个可以通过 BUG 做到，但十分不优雅）、引擎的注油口可以镜像对称(再见了，烦人的走线)</p></li><li><p><strong>种植物种子掉落概率低</strong></p><p>在小概率情况下，收获果实才会掉落种子（至少我们掉落的种子永远不够下一次种植），或许这样并不合理？</p></li><li><p><strong>光照渲染</strong></p><p>在天黑与天亮的转换过程中，游戏中的灯光可能会<strong>短暂失效</strong>，并且自然环境对于全封闭室内灯光居然存在影响！</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>木筏的创意是无与伦比的，在海上收集物资的想法也很酷！探索元素、BOSS 战斗等使得游戏在休闲中仍然保持着一丝肾上腺素飙升的快感</p><p>诚然，开发商<strong>Redbeet Interactive</strong>实力距离超一线大厂还是有所差距，我们在游玩时还是遇到了部分痛点，不过这些都可以算是不痛不痒的特性吧</p><p>如果你想和朋友一同体验海上捡垃圾的快乐，享受建造的乐趣，一同搭建自己的木筏的话，<strong>《Raft 木筏》</strong> 值得一试</p><h1 id="YGR-评分"><a href="#YGR-评分" class="headerlink" title="YGR 评分"></a>YGR 评分</h1><p>《Raft 木筏》 YGR 评分为 <strong>7.2</strong> 分</p><p><img src="/2023/YGR-Raft/Rating.png" alt="Rating"></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/ygr/">Yurik&#39;s Game Rating</category>
      
      
      <category domain="https://yurik.cafe/tags/%E6%B8%B8%E6%88%8F/">游戏</category>
      
      <category domain="https://yurik.cafe/tags/%E6%B5%8B%E8%AF%84/">测评</category>
      
      <category domain="https://yurik.cafe/tags/YGR/">YGR</category>
      
      
      <comments>https://yurik.cafe/2023/YGR-Raft/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「YGR」Yurik’s Game Rating 简介</title>
      <link>https://yurik.cafe/2023/YGM-Introduce/</link>
      <guid>https://yurik.cafe/2023/YGM-Introduce/</guid>
      <pubDate>Sat, 09 Sep 2023 13:22:49 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2023/YGM-Introduce/Cover.webp&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是-YGR&quot;&gt;&lt;a href=&quot;#什么是-YGR&quot; class=&quot;headerlink&quot; title=&quot;什么是 YGR&quot;&gt;&lt;/a&gt;什么是 YGR&lt;/h1&gt;&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2023/YGM-Introduce/Cover.webp"></p><h1 id="什么是-YGR"><a href="#什么是-YGR" class="headerlink" title="什么是 YGR"></a>什么是 YGR</h1><p><strong>Yurik’s Game Rating</strong> 是由 景蓝 Yurik 发起的游戏评分测评栏目</p><p>在 <strong>YGR</strong> 中，我们将会对我们玩过的进行评测并通过特定的标准进行评分</p><p>我们将通过普通玩家视角带你了解这款游戏</p><blockquote><p>评分仅代表 <strong>景蓝 Yurik</strong> 及 参与评测的成员 的观点</p></blockquote><h1 id="为什么创办-Yurik’s-Game-Rating"><a href="#为什么创办-Yurik’s-Game-Rating" class="headerlink" title="为什么创办 Yurik’s Game Rating ?"></a>为什么创办 <strong>Yurik’s Game Rating</strong> ?</h1><p>诚然，已经有类似于 IGN | GS | 游民评测 等知名打牌的测评团队，但我任希望在自己的博客中开一个评测栏目。由此表达我游玩该游戏的感受与思考</p><h1 id="怎么访问-Yurik’s-Game-Rating"><a href="#怎么访问-Yurik’s-Game-Rating" class="headerlink" title="怎么访问 Yurik’s Game Rating ?"></a>怎么访问 <strong>Yurik’s Game Rating</strong> ?</h1><p>你可以访问 <a href="/categories/Yurik-s-Game-Rating/"><strong>分类-Yurik’s Game Rating</strong></a> 来获取关于<strong>Yurik’s Game Rating</strong>的有关内容</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/ygr/">Yurik&#39;s Game Rating</category>
      
      
      <category domain="https://yurik.cafe/tags/%E6%B8%B8%E6%88%8F/">游戏</category>
      
      <category domain="https://yurik.cafe/tags/%E6%B5%8B%E8%AF%84/">测评</category>
      
      <category domain="https://yurik.cafe/tags/YGR/">YGR</category>
      
      
      <comments>https://yurik.cafe/2023/YGM-Introduce/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>每周Todo [23.9.4-23.9.10]</title>
      <link>https://yurik.cafe/2023/Week-TODO-1/</link>
      <guid>https://yurik.cafe/2023/Week-TODO-1/</guid>
      <pubDate>Fri, 08 Sep 2023 14:03:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;ToDo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 
Raft 游戏报告&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;chec</description>
        
      
      
      
      <content:encoded><![CDATA[<p>ToDo:</p><ul><li><p><input checked="" disabled="" type="checkbox"> Raft 游戏报告</p></li><li><p><input checked="" disabled="" type="checkbox"> 清清友链</p></li><li><p><input checked="" disabled="" type="checkbox"> 可能还有别的吧…</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/others/">其他</category>
      
      
      <category domain="https://yurik.cafe/tags/todo/">Todo List</category>
      
      
      <comments>https://yurik.cafe/2023/Week-TODO-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」记于 17 岁生日前</title>
      <link>https://yurik.cafe/2023/miscellanies-1/</link>
      <guid>https://yurik.cafe/2023/miscellanies-1/</guid>
      <pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;记于 17 岁生日前 3 天&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这世界有那么个人 活在我飞扬的青春&lt;/p&gt;
&lt;p&gt;在泪水里浸湿过的长吻&lt;/p&gt;
&lt;p&gt;常让我想啊想出神。&lt;/p&gt;
&lt;p&gt;—— 这世界有那么多人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;琐记，为了保持行文</description>
        
      
      
      
      <content:encoded><![CDATA[<p>记于 17 岁生日前 3 天</p><blockquote><p>这世界有那么个人 活在我飞扬的青春</p><p>在泪水里浸湿过的长吻</p><p>常让我想啊想出神。</p><p>—— 这世界有那么多人</p></blockquote><p>琐记，为了保持行文的统一，我还是称它为杂记吧</p><p>有很多东西，在记忆中，用空间发出感到矫情，憋在心里略显可惜，写一篇博客，在这片互联网孤岛中保留痕迹······</p><p>行文混乱，只供一笑尔</p><h1 id="笔"><a href="#笔" class="headerlink" title="笔"></a>笔</h1><p>第一个故事，要从笔开始 我不是一个文具控，甚至在初中（准确来说是初三）前对文具一无所知。对笔的态度更是能写就行</p><p>一支按动中性笔，晨光的 AGPH8004，.38mm 的 ST 笔尖，是我那时最喜欢的一支.38mm 笔，来自我的同桌，这大概是我第一次对笔有深入的认识吧。虽然后面都没有找到我心心念念的 ST 笔尖的笔了 OWO。</p><p>后来换同桌后又向新同桌<del>借用</del>买了一支 Pilot 的 Juice 黑色，喜欢上了日产笔尖在顺滑与阻尼之间的平衡。<del>就是太贵了</del>上高中前都没在用了。</p><p>上了高中后，手头富裕了（<del>家里给钱了</del>），便买了一些牌子的笔，有百乐的 Juice, Juice Up,斑马的 SARASA，KACO 的 ROCKET,现在还是使用 JUICE UP 作为主力笔，因为 ST 笔尖吧（</p><p>为什么想要写这么一段，可能是对老友的思念，对时光的感慨。这真的是令人怀念过去的一年。</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2023/miscellanies-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用Vercel托管静态网页</title>
      <link>https://yurik.cafe/2023/use-vercel-introduction/</link>
      <guid>https://yurik.cafe/2023/use-vercel-introduction/</guid>
      <pubDate>Mon, 23 Jan 2023 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Vercel 是一个前端页面托管服务网站，用户可以在上面托管部署多个前端框架的项目&lt;/p&gt;
&lt;p&gt;当然，Vercel 也可以直接托管 Htm</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vercel 是一个前端页面托管服务网站，用户可以在上面托管部署多个前端框架的项目</p><p>当然，Vercel 也可以直接托管 Html 静态站点，并且 Vercel 的访问速度优于 Github Pages</p><p><img src="/2023/use-vercel-introduction/speed-compair.png" alt="速度对比"></p><p>写这篇文章的想法来源于两个，一是之前发布的 Hugo 博客部署有一半烂尾了（懒.jpg）, 还有一点就是 Norphin 的博客在他自己自定义后使用了一张 3.04Mb 左右的背景图片，由于他使用 frp 服务+香港节点建站，使得整张图片我加载了大约 10s。于是决定教教他怎么使用 vercel 来规避一些流量损耗。</p><blockquote><p>BTW: 他的背景图是 4K 的，其实一般来说 1080p 到 2k 就差不多了，不必要上传那么大的图片的说…</p></blockquote><h1 id="注册-Vercel"><a href="#注册-Vercel" class="headerlink" title="注册 Vercel"></a>注册 Vercel</h1><p>Vercel 的注册过程很简单，你可以直接使用自己的 GitHub、GitLab、BitBucket 账户直接登录，在本文中就不再过多赘述</p><h1 id="使用-Vercel"><a href="#使用-Vercel" class="headerlink" title="使用 Vercel"></a>使用 Vercel</h1><p>首先在 Github 或者 GitLab 账户（下文简称<strong>你的账户</strong>）中新建一个 Git 仓库，随后将自己的静态文件 Git 提交至仓库内</p><p>接着在 Vercel 中点击 **Add New..**，或者访问<a href="https://vercel.com/new">这个网址</a>。连接你的你的账户，选择先前新建的仓库，点击 Import</p><p>设置你的<strong>Project Name</strong>, 如果你单纯的想要托管 Html 文档和静态资源的话 框架预设(Framework Preset)就选 <strong>Other</strong> 就好了</p><p>点击 部署(Deploy) 后稍等片刻, 你的项目就部署完成</p><h1 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h1><p>Vercel 会在部署项目时提供一个 <strong>.vercel.app</strong> 结尾的二级域名，但由于某些特殊原因，vercel.app 域名可能会无法访问，这时候你就需要一个自己的域名（域名注册方法自行使用搜索引擎搜索）</p><p>在<a href="https://vercel.com/dashboard">Dashboard</a>中点击进入你刚刚部署的项目，点击上方的 Setting 进入设置页面，在左侧边栏进入<strong>Domains(域名)<strong>页面，在输入框中输入你想要的域名, 点击</strong>Add</strong>后按照提示在 DNS 中设置记录，返回域名管理页面点击**Refresh(刷新)**使其检测记录是否生效并注册 SSL 证书即可。</p><blockquote><p>值得注意的是，如果你添加的是一个 www 或者根域名，如 <a href="http://www.yurik.cafe/">www.yurik.cafe</a> 或者 yurik.cafe，Vercel 会跳出提示询问你是选择将 www 域名重定向至根域名还是根域名重定向至 www 域名，抑或是单纯添加你输入的域名，你可以根据自身情况选择。</p><p>Vercel 推荐你将 www 域名重定向至根域名</p></blockquote><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>按照<strong>域名&#x2F;路径&#x2F;文件名</strong>访问即可</p><blockquote><p>Vercel 会自动为域名注册一个免费的 SSL 证书，所以你可以使用 https 访问</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2023/use-vercel-introduction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」树莓派4B烧录CentOS镜像并安装宝塔面板</title>
      <link>https://yurik.cafe/2023/raspberry-pi-install-centos/</link>
      <guid>https://yurik.cafe/2023/raspberry-pi-install-centos/</guid>
      <pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很古早的时候我买了一台 树莓派 4B 4GB 版本（怀念当时 4GB 版本 500 块的日子）&lt;/p&gt;
&lt;p&gt;由于 Cortex-A72 处</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很古早的时候我买了一台 树莓派 4B 4GB 版本（怀念当时 4GB 版本 500 块的日子）</p><p>由于 Cortex-A72 处理器，树莓派 4B 的性能其实很薄弱，当时我也只是勉强用它跑一跑 QQ 机器人和网站服务器。（宝塔跑 Mariadb 安装 CPU 占用率都能 100%）随后用旧电脑刷服务器后树莓派就闲置了。</p><p>最近有朋友想尝试在家里搭建个人网站，我就把树莓派借给了他，但是尝试了很多个 Linux 发行版（Debian、Ubuntu）后宝塔+LNMP 环境还是无法安装成功，不是宝塔无法运行就是 Mysql 无法安装。</p><p>在查阅了互联网资料后，发现我用的最多的 Centos 也存在 Arm 版本，在使用这个发行版后安装宝塔和 LNMP 环境也变得顺利了，于是打算写一篇博客记录一下安装过程</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>需要准备：</p><ul><li>一台接入内网树莓派 4B</li><li>至少 16GB 的内存卡 + 读卡器 (USB3.0 最佳)</li><li>一台电脑</li><li>系统镜像</li><li>Raspberry Pi Imager (可前往 <a href="//www.raspberrypi.com/software/">https://www.raspberrypi.com/software/</a> 下载)</li></ul><h1 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h1><p>其实 CentOS 7 为树莓派提供了专门的系统镜像，在<a href="https://www.centos.org/download/">CentOS - Download</a>中给 Arm 架构的处理器提供了 <a href="//isoredirect.centos.org/altarch/7/isos/aarch64/">ARM64(aarch64)</a> 和 <a href="//isoredirect.centos.org/altarch/7/isos/armhfp/">ARM32(armhfp)</a> ，因为我的树莓派 4B 是 4GB 版本的，所以就选择了 ARM64 的版本</p><p>你可以在对应架构的下载界面中选择官方推荐的镜像下载地址，国内用户可以前往<a href="http://mirror.nju.edu.cn/centos-altarch/7.9.2009/isos/aarch64/images">NJU Mirror</a>、<a href="https://mirrors.tuna.tsinghua.edu.cn/centos-altarch/7.9.2009/isos/aarch64/images/">清华大学开源软件镜像站</a> 或 <a href="https://mirrors.bfsu.edu.cn/centos-altarch/7.9.2009/isos/aarch64/images/">北京外国语大学开源软件镜像站</a> 下载</p><p>下载文件名带 <code>RaspberryPI</code> 的镜像</p><p>下载完毕后使用树莓派官方的烧录工具 Raspberry Pi Imager 烧录</p><p>插入读卡器，启动 Raspberry Pi Imager</p><p>选择操作系统-&gt;使用自定义镜像，选择刚才下载好的 CentOS 镜像，再选择要烧录的内存卡，点击<strong>烧录</strong>按钮即可开始烧录</p><blockquote><p>若内存卡中已烧录其它系统，请擦除一遍后在进行烧录</p><p><strong>注意 1</strong>：烧录后内存卡中原存储文件将<strong>永久</strong>丢失，请及时备份！</p><p><strong>注意 2</strong>：烧录无需使用 Imager 的高级设置，若设置永久设置请清空后烧录</p></blockquote><h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><p>等待烧录完成后即可取出内存卡插入树莓派内，插上电源与网线即可启动</p><p>使用 ssh 登录树莓派，默认用户名为<code>root</code>， 初始密码为<code>centos</code></p><blockquote><p>ssh 连接命令: <code>ssh 用户名@主机IP</code></p><p>登录后可使用<code>passwd</code>修改密码，请牢记修改后密码</p><p>若不清楚树莓派 IP 可进入路由器后台或使用<a href="https://www.advanced-ip-scanner.com/">Advanced IP Scanner</a>扫描</p></blockquote><p>进入系统后输入<code>df -h</code>查看各分区大小</p><p>使用<code>rootfs-expand</code>拓展系统空间</p><blockquote><p><strong>警告</strong>：请务必拓展系统空间，否则可能导致空间过下使得宝塔安装失败</p></blockquote><p>新系统启动后推荐将软件源改为国内镜像，具体请参考镜像站帮助文档，如<a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos-altarch/">清华大学镜像站</a>可运行以下命令一键换源</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">sudo sed -e &#x27;s|<span class="hljs-type">^mirrorlist</span>=|<span class="hljs-type">#mirrorlist</span>=|<span class="hljs-type">g</span>&#x27; \<br>         -e &#x27;s|<span class="hljs-type">^#baseurl</span>=http://mirror.centos.org/altarch/|<span class="hljs-type">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos-altarch/|<span class="hljs-type">g</span>&#x27; \<br>         -e &#x27;s|<span class="hljs-type">^#baseurl</span>=http://mirror.centos.org/$contentdir/|<span class="hljs-type">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos-altarch/|<span class="hljs-type">g</span>&#x27; \<br>         -i.bak \<br>         /etc/yum.repos.d/CentOS-*.repo<br></code></pre></td></tr></table></figure><p>最后，更新软件包缓存 <code>sudo yum makecache</code></p><p>你也可以将系统语言设置为中文，设置方式如下：</p><ol><li>查看当前系统语言包 <code>locale</code></li><li>查看所有系统语言包 <code>locale -a</code></li><li>检查是否存在 <code>zh_CN</code> 开头的语言包</li><li>使用 <code>nano /etc/locale.conf</code> 编辑 <code>/etc/locale.conf</code> 文件，将其中的<strong>LANG</strong>值改为<code>zh_CN.UTF-8</code>（若第三步中未找到<code>zh_CN.UTF-8</code>，可用其他<code>zh_CN</code>开头的语言包替换）</li><li>使用<code>reboot</code>命令重启系统让修改生效</li></ol><blockquote><p>修改语言为中文后部分软件<strong>可能存在未知错误</strong>，若错误发生请按照第四步将<strong>LANG</strong>值改为<code>en_US.UTF-8</code></p></blockquote><h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><p>参考<a href="https://www.bt.cn/new/download.html">宝塔官网-下载</a>使用 CentOS 安装脚本安装</p><p><code>yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code></p><blockquote><p>请删除命令末尾 9 位字符串后运行命令</p><p><strong>警告</strong>: 请在纯净环境中安装宝塔面板，若你先前已安装其他 LNMP&#x2F;LAMP 运行环境或先前宝塔面板安装失败请参考<strong>一、烧录镜像</strong>擦除内存卡并重新烧录系统后安装</p></blockquote><p>稍等一段时间后宝塔面板将安装完成</p><p><img src="/2023/raspberry-pi-install-centos/console.png" alt="BT-Install-Done"></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2023/raspberry-pi-install-centos/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」在Linux上搭建MC服务器（一）</title>
      <link>https://yurik.cafe/2022/minecraft-server-on-linux-1/</link>
      <guid>https://yurik.cafe/2022/minecraft-server-on-linux-1/</guid>
      <pubDate>Wed, 14 Dec 2022 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;接上文&lt;/p&gt;
&lt;p&gt;自从有了一台独立服务器后，可以玩的东西就多了&lt;/p&gt;
&lt;p&gt;于是决定开一个我的世界 Java 服务器&lt;/p&gt;
&lt;p&gt;写一篇文章记录一下&lt;/p&gt;
&lt;h1 id=&quot;安装运行环境&quot;&gt;&lt;a href=&quot;#安装运行环境&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<p>接上文</p><p>自从有了一台独立服务器后，可以玩的东西就多了</p><p>于是决定开一个我的世界 Java 服务器</p><p>写一篇文章记录一下</p><h1 id="安装运行环境"><a href="#安装运行环境" class="headerlink" title="安装运行环境"></a>安装运行环境</h1><p>Minecraft Java 版的服务器运行环境非常单纯，只需要一个 Java 就行</p><p>由于我想开一个 1.16.5 的服务器，所以 Java 版本选择了 Java 17</p><p>安装过程参考的这篇文章《<a href="https://www.cnblogs.com/chaosmoor/p/15897693.html">Linux 安装 Java 17 - ChaosMoor</a>》</p><h1 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h1><p>Minecraft 服务端有很多种，例如原版香草端(Vanilla)、Paper、Bukkit 等</p><p>由于我希望保留原版的红石特性，所以选择了原版服务端</p><p>对于最新版本的 Minecraft 服务器，可以前往<a href="https://www.minecraft.net/download/server">Minecraft.net</a>下载 jar 文件</p><p>如果你想获取特定版本的服务端文件，可以访问<a href="https://minecraft.fandom.com/wiki/Minecraft_Wiki">Minecraft Wiki</a>搜索对应版本页面</p><p><img src="/2022/minecraft-server-on-linux-1/wiki.png" alt="1.16.5 - WIKI"></p><p>▲ Wiki 界面</p><p>Download(下载) -&gt; Server(服务端)下载服务端</p><blockquote><p><span style="color:red !important"><b>注意，不开玩笑！</b></span>：千万不要误点括号后的(.json)文件，或错选 Obfuscation maps(混淆映射表)中的 Server(服务器)选项</p></blockquote><h1 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h1><p>进入终端</p><p>在服务器上新建一个文件夹存放服务端文件</p><p><code>mkdir &lt;文件夹名称&gt;</code></p><p>进入文件夹</p><p><code>cd &lt;刚才的文件夹名称&gt;</code></p><p>将下载好的服务端文件上传至该文件夹</p><p><img src="/2022/minecraft-server-on-linux-1/winscp-upload.png" alt="WinSCP"></p><p>▲ 使用 WinSCP 上传</p><blockquote><p>我在这里将服务端命名为 server.jar</p></blockquote><p>修改文件权限</p><p><code>chmod 744 &lt;服务端文件名&gt;.jar</code></p><p>然后运行服务器！</p><p><code>java -Xmx1024M -Xms1024M -jar &lt;服务端文件名&gt;.jar nogui</code></p><p><img src="/2022/minecraft-server-on-linux-1/waring-1.png" alt="Waring-1"></p><p>▲ 终端报错了</p><p>怎么回事，闪退啦?</p><p>查了下翻译软件，发现是要你同意 Eula 文件</p><p>做法很简单</p><p>用文本编辑器将 eula.txt 中最后一行<code>eula=false</code>修改为<code>eula=true</code>再次运行即可</p><p><img src="/2022/minecraft-server-on-linux-1/eula-true.png" alt="Accept EULA"></p><p>▲ EULA.TXT 修改后</p><blockquote><p><span style="color:green !important"><b>记住这点更好</b></span>：当你将 eula 改为<strong>true</strong>后，即代表你同意了《<a href="https://account.mojang.com/documents/minecraft_eula">MINECRAFT 最终用户许可协议</a>》, 因此你最好详细阅读一下</p></blockquote><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>无论是什么客户端，<strong>server.properties</strong>是必须的配置文件，当然，在第一次运行服务端时会自动生成，文件内容 + 必要注释 请查看<a href="https://wiki.yurik.cafe/Game/Minecraft/Server/server.properties/">这个网址</a></p><p>可以对应自己实际情况修改，也可以下载<a href="server.properties">我的配置文件</a>（基本默认）</p><h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><p><img src="/2022/minecraft-server-on-linux-1/done.png" alt="Done"></p><p>▲ 游戏内的显示效果</p><h1 id="管理服务器"><a href="#管理服务器" class="headerlink" title="管理服务器"></a>管理服务器</h1><p>你可以使用命令行来管理服务器，常用的命令有：</p><ul><li><code>stop</code>：停止服务器</li><li><code>list</code>：列出当前在线的玩家</li><li><code>kick [player]</code>：将玩家踢出服务器</li><li><code>ban [player]</code>：封禁玩家</li><li><code>op [player]</code>：将玩家提升为服务器管理员</li><li><code>whitelist add [player]</code>：将玩家添加到白名单</li></ul>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2022/minecraft-server-on-linux-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」获取B站视频封面</title>
      <link>https://yurik.cafe/2022/get-bilibili-album/</link>
      <guid>https://yurik.cafe/2022/get-bilibili-album/</guid>
      <pubDate>Sun, 23 Oct 2022 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近重装了电脑，然后电脑上整理的 iTunes 资料库全没了。&lt;del&gt;草&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;在整理的时候发现有一些歌曲是直接从 B</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近重装了电脑，然后电脑上整理的 iTunes 资料库全没了。<del>草</del></p><p>在整理的时候发现有一些歌曲是直接从 B 站上下载下来的，专辑封面也是从 B 站封面扒的，全没了（呜呜呜</p><p>虽然在 Bing 上一搜就有很多封面提取的网站</p><p><img src="/2022/get-bilibili-album/1.webp" alt="网站1"></p><p><img src="/2022/get-bilibili-album/2.webp" alt="网站2"></p><p><img src="/2022/get-bilibili-album/3.webp" alt="网站3"></p><p>但是秉承着<strong>用轮子不如造轮子</strong>的理论(<del>其实就是闲着没事</del>)，我决定自己用 Python 写一个提取封面的工具</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>既然是造轮子，那当然要先看 B 站的 API</p><p>搜了一下，发现网上公认的哔哩哔哩官方 API 文档地址是：**<a href="http://docs.bilibili.cn/wiki">http://docs.bilibili.cn/wiki</a>**</p><p>但是</p><p><img src="/2022/get-bilibili-album/4.webp" alt="网站无法访问"></p><p><img src="https://i.loli.net/2021/07/27/HPiBuzEebg5Zclf.jpg" alt="2017717113835269.jpg"></p><blockquote><p>在 Github 上面找到的野生文档 <a href="https://github.com/SocialSisterYi/bilibili-API-collect">SocialSisterYi&#x2F;bilibili-API-collect</a></p></blockquote><p>API</p><p>获取视频信息</p><p><code>https://api.bilibili.com/x/web-interface/view?bvid=BV号</code></p><p>丢**<a href="http://json.cn/">json.cn</a>**解析一下</p><p>找到关于视频封面的<code>pic</code>字段<code>&quot;pic&quot;:&quot;http://i0.hdslb.com/bfs/archive/38ee715cfe85351c790102691d01d05007092c9e.jpg&quot;,</code></p><p>那么，开搞</p><h1 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h1><p>随便写了个代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br> 主程序<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    bvid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;视频BV号:&#x27;</span>)<span class="hljs-comment">#获取视频BV号</span><br>    info = requests.get(<span class="hljs-string">&#x27;https://api.bilibili.com/x/web-interface/view?bvid=&#x27;</span>+bvid).text<br>    info = json.loads(info)<br>    cover = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;pic&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(cover)<br></code></pre></td></tr></table></figure><p><img src="/2022/get-bilibili-album/output.webp" alt="封面输出"></p><p><strong>输出成功</strong></p><blockquote><p>PS:《噬光者与发光体的爱情》真的好听！！！！Meumy 我吹爆！！！！</p></blockquote><h2 id="接下来写输出"><a href="#接下来写输出" class="headerlink" title="接下来写输出"></a>接下来写输出</h2><h3 id="先写了封面文件夹检测"><a href="#先写了封面文件夹检测" class="headerlink" title="先写了封面文件夹检测"></a>先写了封面文件夹检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mkcoverdif</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(<span class="hljs-string">&#x27;cover&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;cover&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="用-requests-写了图片保存的函数"><a href="#用-requests-写了图片保存的函数" class="headerlink" title="用 requests 写了图片保存的函数"></a>用 requests 写了图片保存的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">imgdownload</span>(<span class="hljs-params">url,name</span>):<br>    cover = requests.get(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./cover/&#x27;</span>+name+<span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> pic:<br>        pic.write(cover.content)<br></code></pre></td></tr></table></figure><h3 id="获取一些必要信息"><a href="#获取一些必要信息" class="headerlink" title="获取一些必要信息"></a>获取一些必要信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cover = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;pic&#x27;</span>)  封面地址<br>title = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;title&#x27;</span>)  视频标题<br>bvid = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;bvid&#x27;</span>)  返回的正确格式BV号<br></code></pre></td></tr></table></figure><blockquote><p>这是直接写入主程序块的</p></blockquote><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mkcoverdir</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(<span class="hljs-string">&#x27;cover&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;cover&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imgdownload</span>(<span class="hljs-params">url,name</span>):<br>    cover = requests.get(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./cover/&#x27;</span>+name+<span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> pic:<br>        pic.write(cover.content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">av2bv</span>(<span class="hljs-params">av</span>):<br>    info = requests.get(<span class="hljs-string">&#x27;https://api.bilibili.com/x/web-interface/view?aid=&#x27;</span>+av).text<br>    info = json.loads(info)<br>    <span class="hljs-keyword">if</span> info.get(<span class="hljs-string">&#x27;code&#x27;</span>) == <span class="hljs-number">0</span>:<br>        vid = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;bvid&#x27;</span>)  返回的正确格式BV号<br>        <span class="hljs-keyword">return</span> vid<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;找不到该AV号&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CODE:&quot;</span>+<span class="hljs-built_in">str</span>(info.get(<span class="hljs-string">&#x27;code&#x27;</span>))+<span class="hljs-string">&quot; MESSAGE:&quot;</span>+info.get(<span class="hljs-string">&#x27;message&#x27;</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bvcheck</span>(<span class="hljs-params">vid</span>):<br>    <span class="hljs-keyword">if</span> vid.startswith(<span class="hljs-string">&#x27;BV&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> vid.startswith(<span class="hljs-string">&#x27;bV&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> vid.startswith(<span class="hljs-string">&#x27;Bv&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> vid.startswith(<span class="hljs-string">&#x27;bv&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(vid) == <span class="hljs-number">12</span>:<br>            info = info = requests.get(<span class="hljs-string">&#x27;https://api.bilibili.com/x/web-interface/view?bvid=&#x27;</span>+vid).text<br>            info = json.loads(info)<br>            <span class="hljs-keyword">if</span> info.get(<span class="hljs-string">&#x27;code&#x27;</span>) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;找不到该BV号&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CODE:&quot;</span>+<span class="hljs-built_in">str</span>(info.get(<span class="hljs-string">&#x27;code&#x27;</span>))+<span class="hljs-string">&quot; MESSAGE:&quot;</span>+info.get(<span class="hljs-string">&#x27;message&#x27;</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这不是一个合法的BV号, BV号应为12位字符串&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这不是一个合法的BV号，BV号应为 BV 开头&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    valid = <span class="hljs-literal">True</span><br>    mkcoverdir()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请选择 AV号 / BV号&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.AV号     2.BV号&quot;</span>)<br>    status = <span class="hljs-built_in">input</span>()<br><br>    <span class="hljs-keyword">if</span> status == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        vid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;AV号:&#x27;</span>)<br>        vid = re.sub(<span class="hljs-string">&#x27;av&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, vid, flags=re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> vid.isdigit():<br>            vid = av2bv(vid)<br>            <span class="hljs-keyword">if</span> vid == <span class="hljs-number">1</span>:<br>                valid = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这不是一个合法的AV号&#x27;</span>)<br>            valid = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> status == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        vid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;视频BV号:&#x27;</span>)<span class="hljs-comment">#获取视频BV号</span><br><br>    <span class="hljs-keyword">if</span> status == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> status == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        <span class="hljs-keyword">if</span> valid:<br>            <span class="hljs-keyword">if</span> bvcheck(vid):<br>                info = requests.get(<span class="hljs-string">&#x27;https://api.bilibili.com/x/web-interface/view?bvid=&#x27;</span>+vid).text<br>                info = json.loads(info)<br>                bvid = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;bvid&#x27;</span>)  返回的正确格式BV号<br>                cover = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;pic&#x27;</span>)  封面地址d<br>                title = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;title&#x27;</span>)  视频标题<br>                <span class="hljs-keyword">if</span> status == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    vid = <span class="hljs-string">&quot;av&quot;</span>+<span class="hljs-built_in">str</span>(info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;aid&#x27;</span>)) <span class="hljs-comment">#返回的正确格式AV号</span><br>                <span class="hljs-keyword">if</span> status == <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    vid = info[<span class="hljs-string">&#x27;data&#x27;</span>].get(<span class="hljs-string">&#x27;bvid&#x27;</span>)  返回的正确格式BV号<br>               <span class="hljs-built_in">print</span>(title+<span class="hljs-string">&#x27; - &#x27;</span>+bvid+<span class="hljs-string">&quot;: &quot;</span>+cover)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;完成!&#x27;</span>)  提示一下<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存文件名:&quot;</span>+title+<span class="hljs-string">&#x27; - &#x27;</span>+vid+<span class="hljs-string">&quot;.jpg&quot;</span>)<br>                imgdownload(cover,title+<span class="hljs-string">&#x27; - &#x27;</span>+vid)  下载<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这不是一个合法的状态码&quot;</span>)<br><br><br> 主程序<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br>    os.system(<span class="hljs-string">&#x27;pause&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>自己加了 AV 号与 BV 号的判断，如果是 AV 号就把 AV 转换成 BV 再用 BV 手法去找封面</p><p>然后根据选择的类型进行保存</p></blockquote><h3 id="运行一下"><a href="#运行一下" class="headerlink" title="运行一下"></a>运行一下</h3><p><img src="/2022/get-bilibili-album/6.webp" alt="成功"></p><p><strong>Done！</strong></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>使用 Python 的 json 库解析了 B 站官方的 API 接口，完成了封面的下载</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2022/get-bilibili-album/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
