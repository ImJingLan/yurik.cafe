<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>景蓝的小屋</title>
    <link>https://yurik.cafe/</link>
    
    <atom:link href="https://yurik.cafe/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Yurik&#39;s Lab</description>
    <pubDate>Mon, 23 Jun 2025 23:50:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>永远是个小孩 - 站点更新</title>
      <link>https://yurik.cafe/2025/i-am-always-a-kid/</link>
      <guid>https://yurik.cafe/2025/i-am-always-a-kid/</guid>
      <pubDate>Mon, 23 Jun 2025 23:48:31 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;你们这些孩子哪里是真为了写博客。&lt;/p&gt;
&lt;p&gt;你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。&lt;/p&gt;
&lt;p&gt;—— dboy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好像是第二次引用这段话了。&lt;/p&gt;
&lt;p&gt;如</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>你们这些孩子哪里是真为了写博客。</p><p>你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。</p><p>—— dboy</p></blockquote><p>好像是第二次引用这段话了。</p><p>如你所见，这个站点的外观将会发生很大的改变。我将他从 Hexo + Fluid 的组合转到了 Fuwari 框架。</p><p>好吧我承认我确实是馋 Fuwari 的颜值了。</p><p>说会正事，Hexo 到 Fuwari 确实需要一段时间，在此期间两个站点将会采用<strong>双轨运行</strong>的策略。即主站保持原版本至 Yurari (Yurik + Fuwari) 版本稳定测试通过。</p><p>在此期间 主站将会添加一个名为 <a href="//fuwari.yurik.cafe">fuwari.yurik.cafe</a> 的超链接，最新的文章将会在此更新，主站内容将不再变动。</p><p>站点 favicon 静态地址不会变化，各友站无需变动。</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/announces/">站点公告</category>
      
      
      
      <comments>https://yurik.cafe/2025/i-am-always-a-kid/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我家族没精神病史 - MacBook Pro 2023 上手体验</title>
      <link>https://yurik.cafe/2025/macbook-pro-review/</link>
      <guid>https://yurik.cafe/2025/macbook-pro-review/</guid>
      <pubDate>Tue, 18 Feb 2025 13:58:04 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;我家族没精神病史&quot;&gt;&lt;a href=&quot;#我家族没精神病史&quot; class=&quot;headerlink&quot; title=&quot;我家族没精神病史&quot;&gt;&lt;/a&gt;我家族没精神病史&lt;/h1&gt;&lt;p&gt;买一台 Mac，很奇怪，是吗？&lt;/p&gt;
&lt;p&gt;母胎到现在都是 Windows 的忠实用户，现</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="我家族没精神病史"><a href="#我家族没精神病史" class="headerlink" title="我家族没精神病史"></a>我家族没精神病史</h1><p>买一台 Mac，很奇怪，是吗？</p><p>母胎到现在都是 Windows 的忠实用户，现在居然买了一台 MacBook Pro。</p><h1 id="放下游戏，立地成佛"><a href="#放下游戏，立地成佛" class="headerlink" title="放下游戏，立地成佛"></a>放下游戏，立地成佛</h1><p>步入高中的最后一个学期，是时候认真学习啦！（是不是有点太晚了？）</p><p>我毅然决然地把魔霸给收起来了（放在另一个房间串流），下决心不再碰他。</p><p>可还是有一些照片编辑，文字处理（正如这篇博客）以及代码处理的需求，使用 iPad Pro 还是有些捉襟见肘，正巧我想体验下 macOS，就用压岁钱购买了这样一台电脑。</p><h2 id="为什么是他"><a href="#为什么是他" class="headerlink" title="为什么是他"></a>为什么是他</h2><p>在国补后的 Mac Mini M4 和二手 MacBook Pro 之间我还是选择了 MacBook Pro，原因有很多。</p><p>查询资料可以发现，M3 Pro (11 Cores，下文若无特指不再标注) 的性能相较 M4 不相上下，这时候便可以关注其他的方面。</p><p>首先便是价格，M3 Pro 的 MacBook Pro 在红色二手平台 99 新 18+512 的售价为 8800 元出头，伴随着平台验机；而 M4 Mac Mini 的价格国补完最便宜的型号是 3600 元。看似 Mac Mini 更有性价比，但考虑到我的魔霸由于散热采用液金以及他的尺寸、续航的因素，使得他即使是笔记本我也不方便携带。而且相较与 Mac Mini 16+256 的配置，MacBook Pro 更是来到了 18+512 的起步，算上屏幕，我认为选择 MBP 是一个更好的选择。</p><p><img src="/2025/macbook-pro-review/DSC2141.webp"><br><img src="/2025/macbook-pro-review/DSC2142.webp"></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/reviews/">开箱</category>
      
      
      
      <comments>https://yurik.cafe/2025/macbook-pro-review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「纯白之境」现已上线</title>
      <link>https://yurik.cafe/2024/white-state/</link>
      <guid>https://yurik.cafe/2024/white-state/</guid>
      <pubDate>Thu, 03 Oct 2024 19:50:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;「纯白之境」站点已正式上线，这是一个记录汐琥的梦和文字的站点&lt;/p&gt;
&lt;p&gt;摘自「纯白之境」开站词&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将心中所想现于形，再展示出来。&lt;br&gt;在再次记录中修正，感悟&lt;br&gt;不需要多么华丽的文字，不需要多么炫彩的特效。&lt;br&gt;一张白纸，黑底</description>
        
      
      
      
      <content:encoded><![CDATA[<p>「纯白之境」站点已正式上线，这是一个记录汐琥的梦和文字的站点</p><p>摘自「纯白之境」开站词</p><blockquote><p>将心中所想现于形，再展示出来。<br>在再次记录中修正，感悟<br>不需要多么华丽的文字，不需要多么炫彩的特效。<br>一张白纸，黑底白字。<br>在「纯白之境」中留下回忆。</p></blockquote><p>连接梦境: <a href="//prts.ink">prts.ink</a></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/announces/">站点公告</category>
      
      
      
      <comments>https://yurik.cafe/2024/white-state/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」南山南，北秋悲</title>
      <link>https://yurik.cafe/2024/nanshan-south-beiqiu-sad/</link>
      <guid>https://yurik.cafe/2024/nanshan-south-beiqiu-sad/</guid>
      <pubDate>Sun, 22 Sep 2024 15:21:56 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;好久没更新随笔了，突然想写点什么了。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;先说说境况吧，有了一段短暂的感情，&lt;strong&gt;「多可喜，亦多可悲」&lt;/strong&gt;，也算是终了，缘分已尽罢了。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;哥们辩论第一阶段赢了捏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然</description>
        
      
      
      
      <content:encoded><![CDATA[<p>好久没更新随笔了，突然想写点什么了。</p><p><del>先说说境况吧，有了一段短暂的感情，<strong>「多可喜，亦多可悲」</strong>，也算是终了，缘分已尽罢了。</del></p><p>哥们辩论第一阶段赢了捏。</p><blockquote><p>然余居于此，多可喜，亦多可悲。 ————《项脊轩志》归有光</p><p>然而我住在这里，有许多值得高兴的事，也有许多值得悲伤的事。</p></blockquote><p>升入高三，精神状态说不上很好，也说不上很差。听说的所谓「高三状态」也没有发生在我身上，一切还是照旧。看着眼前的分数条也提不起什么努力的兴致，只当日复一日。</p><p>中秋又和初中同桌联系上了，突然发现初中时候的友谊是最单纯的，与现在的高中同学勾心斗角不同，那时就单纯地认为朋友都很好，现在也是。</p><p>说起认为买的最值的老产品，我认为就是 iPod 了，如今为止，我已经在里面存储了 25GB 的歌曲了。显而易见，很多歌即使在里面也很久没听过了。前段时间，我选择了随机播放，马頔的《南山南》从耳机中传出。突然感觉脑袋像在过片一般，无数画面映入脑海。开心的，怀念的，悲伤的，林林总总，那个晚修我就这样在那里呆坐着，15 分钟，《南山南》一遍一遍地放着，一遍又一遍。人要是矫情起来，感觉所有歌都在唱自己。心若荒芜，才会倍感孤独，身处踌躇，才会奈何无助。</p><p>带着耳机，走在校道上，一首插兜，你永远也不知道我耳机中是《南山南》还是《加州旅馆》。</p><p>所谓随笔，自然是想到哪就就写到哪吧。感觉本博的随笔都是些青春伤痛文学的说。</p><p>各位晚安。</p><blockquote><p>庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2024/nanshan-south-beiqiu-sad/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「转载」硬件篇 | NAS硬件选购DIY指南：不同价位的硬件搭配建议及心得</title>
      <link>https://yurik.cafe/2024/nas-hardware-guide/</link>
      <guid>https://yurik.cafe/2024/nas-hardware-guide/</guid>
      <pubDate>Sun, 28 Jul 2024 02:17:23 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;原文来自 &lt;a href=&quot;https://blog.scio.icu/index.php/archives/7/&quot;&gt;『硬件篇 | NAS 硬件选购 DIY 指南：不同价位的硬件搭配建议及心得』&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>原文来自 <a href="https://blog.scio.icu/index.php/archives/7/">『硬件篇 | NAS 硬件选购 DIY 指南：不同价位的硬件搭配建议及心得』</a></p></blockquote><h1 id="一、以装机的角度学习硬件的搭配"><a href="#一、以装机的角度学习硬件的搭配" class="headerlink" title="一、以装机的角度学习硬件的搭配"></a>一、以装机的角度学习硬件的搭配</h1><p>ps：与常规教程文章不同，别的作者列出的价格可能都是捡漏价格，你自己上大概会多花 5%-10%左右的预算，而我给的价格（除市场波动较大外）都是一般价，你能捡到漏，最差跟我平价，如果比我花费的还多，那你可以再考虑考虑其他配置</p><h3 id="“丐中强”配置（600-￥）"><a href="#“丐中强”配置（600-￥）" class="headerlink" title="“丐中强”配置（600- ￥）"></a>“丐中强”配置（600- ￥）</h3><table><thead><tr><th>硬件</th><th>型号</th><th>价格</th><th>购入渠道</th></tr></thead><tbody><tr><td>主板</td><td>H81 ITX 17*17CM</td><td>板 U 套餐 210</td><td>咸鱼</td></tr><tr><td>CPU</td><td>g1840</td><td></td><td>咸鱼</td></tr><tr><td>散热*</td><td>AVC 铜芯散热 28mm 高</td><td>25</td><td>咸鱼</td></tr><tr><td>内存条</td><td>金士顿 2g ddr3 *2</td><td>33.2</td><td>淘宝</td></tr><tr><td>电源</td><td>益衡 7025B + 电饭煲线</td><td>253</td><td>淘宝</td></tr><tr><td>机箱</td><td>蜗牛星际 a 机箱（85 新）</td><td>89.9</td><td>咸鱼</td></tr><tr><td>SATA 线</td><td>随便就行*4</td><td>19.6</td><td>京东</td></tr><tr><td>合计</td><td></td><td>630.7</td><td>建议价格 600 以内</td></tr></tbody></table><h4 id="点评："><a href="#点评：" class="headerlink" title="点评："></a>点评：</h4><p><strong>整体</strong>：除了电源外，其他都是丐中丐配置，因为这个配置的话属于最低配，要换就是全都换，没有必要上好的，毕竟选用这套配置就是因为手头紧，没预算。</p><p><strong>机箱</strong>：千元以内没有其他好选择，就是星际蜗牛机箱，相对较为经济实用，自带背板虽然不稳但是带一两个 16T 或者 4 个 4T 绰绰有余。而机箱一旦敲定，就决定了你的主板，比如这种小机箱只能用 itx（17*17cm）的主板。</p><p><strong>机箱</strong>：传统的“NAS”机箱主要是空间紧凑、体型较小，而不是性价比好、可拓展性。比如星际蜗牛这款机箱是没有预留 pcie 卡的出口的，如果你有需求需要换机箱或者剪机箱。也可以选择传统的 PC 机箱，但是硬盘位置吃紧，半岛铁盒这种，总感觉稳定性欠佳。服务器机箱有些大材小用，以及服务器机箱是在 300+左右的性价比高，百元内还是先不要考虑了。</p><p><strong>板 U</strong>：这套板 U 一点特色没有，也没有什么性价比，但是这个价位也就这些选择，因为 h61 主板的网口原生是百兆的，都是改的或者再加 pcie 转网口拓展卡，拓展卡功耗并不算高，虽然说是过度，起码得用三个月吧，不如直接换平台，所以就敲定了这套板 u，cpu 可以根据当前实际情况做变动，整体溢价不超过 20%就行</p><p><strong>散热</strong>：散热器不用太好但也不要太坏，一般的品牌散热就行，需要注意的就是散热器的高度，受限于机箱高度，这个可以问机箱卖家，都有数据的，一般卖散热器的和板 u 的都会附赠硅脂，建议提前问好以免乌龙，这个价位带的硅脂就行了（*：我这个散热器与主板电容冲突，剪掉散热器一角就可以了，可以参考：这篇文章）</p><p><strong>电源</strong>：理论上这套配置，电源随便选个一百多的都绰绰有余，立马变成“500 元神机”，但我觉得真没必要，首先电源是维系设备稳定运行的重要工具，电源一个不稳定，all in boom。其次，7025b 这款电源功率为 250w，质量也比较好，是可以长久使用下去的，不管是换配置还是到其他设备上用都是绰绰有余的（至少下一个或下两个阶段都能用），不会像其他配件一样升级必须抛弃。以及这款电源别在咸鱼上买，都是假标</p><p><strong>其他</strong>：至于其他的 sata 线看个人需求吧，u 盘我有很多所以没列入，螺丝刀、网线等工具也没列入，内存就是随便亮机就行</p><p><strong>总结</strong>：所以这套整体都非常丐，但是电源却是“强”的，因此叫为丐中强配置。用来当文件服务器完全够用，看视频的话就 smb 直连吧，解码别想了。用来当下载机、挂 pt、文件服务器、学习研究很好用，但是没法用来折腾</p><h3 id="“强中丐”配置（3000±200-￥）"><a href="#“强中丐”配置（3000±200-￥）" class="headerlink" title="“强中丐”配置（3000±200 ￥）"></a>“强中丐”配置（3000±200 ￥）</h3><table><thead><tr><th><strong>配件</strong></th><th><strong>型号</strong></th><th><strong>价格</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><strong>cpu</strong></td><td>i3 12100</td><td>757</td><td>咸鱼，有运费！</td></tr><tr><td><strong>主板</strong></td><td>华硕 prime h610m-a d4</td><td>459</td><td>咸鱼，439 的被被人蹲走了，犹豫就会败北</td></tr><tr><td><strong>内存</strong></td><td>七彩虹 ddr4 2666 16GB*2</td><td>577</td><td>京东</td></tr><tr><td><strong>机箱*</strong></td><td>tank 6 盘位</td><td>809</td><td>淘宝</td></tr><tr><td><strong>散热机箱自带</strong></td><td>sata 线机箱也带 6 根</td><td></td><td></td></tr><tr><td><strong>拓展</strong></td><td>m2 转 sata</td><td>149</td><td>京东</td></tr><tr><td><strong>其他</strong></td><td>利民硅脂  tf9</td><td>39.88</td><td>京东</td></tr><tr><td><strong>已有</strong></td><td></td><td>电源（益衡 7025B ）、u 盘已有</td><td></td></tr><tr><td><strong>合计</strong></td><td></td><td>2790.88</td><td>带电源 3040 ￥</td></tr></tbody></table><h4 id="点评：-1"><a href="#点评：-1" class="headerlink" title="点评："></a>点评：</h4><p><strong>整体</strong>：这套配置乍一看中规中矩，不如 12400+h610&#x2F;b660，也确实如此，但是两者差着近 400 元呢，也是不小的数字（于我而言），抛下 12400 不谈，这套配置就是高端机器中比较丐的了。我主要是看中进可攻退可守，因为我包括很多个人用户，都是不喜欢卖配件的，都烦扯皮，卖的价格还低。那么这套配置即使不用了，还可以转型组成普通的主机，一般的办公娱乐完全够了，12 代也够新，不会很快过时，要是选八代九代可能就锁死在 nas 上了，不用了配主机也跟毛毛雨一样。所以如果有预算直接上 12400，更加的好用</p><p><strong>机箱_空间</strong>：一旦有预算就要脱离 itx 的魔爪，即使是到了 matx（24.4x24.4cm 以内，具体规格细分很多）平台，那也是质一般的飞跃。基本上大于四百的机箱都是 matx 及以上规格的。不仅安装方便、空间也大、散热和拓展也方便。一般也都是 6&#x2F;8 盘位机箱和复数个 2.5 寸位。</p><p><strong>机箱_价格</strong>：除此之外就是要考虑价格了，常见的 nas6&#x2F;8 盘位基本上都是 800 左右，常见的型号&#x2F;品牌就是 tank、拓普龙、宝藏盒、安钛克、万由等等。其中拓普龙价格比较低，万由价格比较高，宝藏盒与 tank 价格适中</p><p><strong>机箱_拓展</strong>：甚至还有便宜的，半岛铁盒，但是普通机箱无背板，直接排除（硬盘共振盒一拖多的普通 sata 供电如果不稳直接 gg），我综合考虑之下选择了 tank，之所以没选择经济实惠的拓普龙是因为背板与整套的购买体验。比如 tank 自带 L 形散热，用料相对稳当，长的还好看点，竖直放置方便，全高 pcie、售后团队等等。这个看个人，溢价肯定是有的，缺点也有，那就是 6 盘位，普遍都是 8 盘位的。但是我步子比较大，硬盘后续也要补充，一步到位机箱走稳定路线吧！这个价位机箱就不建议走二手了，咸鱼上运费很贵比新的便宜不了多少，而且质量还说不准</p><p><strong>机箱_服务器</strong>：还有另一个非常好的选择，就是服务器机箱，12、24 盘位的，价格还低，400 以内妥妥拿下。但是因为体型比较大涉及到线材长度之类的问题，其他细节上的问题我就没进一步了解了，因为我目前没上服务器机箱，原本是打算弄的，后来添置了磁带机就没这个需求了。如果要上服务器机箱的话，建议先弄好整体的环境，比如机架&#x2F;机柜、专门存放设备的地方（一般都是工业暴力扇噪音很大）等等。</p><p><strong>板 U</strong>：12100+h610 是比较稳当的一步，你说惊艳吧，也就这个样，你说不行吧，性价比高的也就这套，或者在这套浮动。比如如果预算加不到 300，可以 u 升级为 12400，预算再加点板子换成 b660。这样的话性能又是一个大台阶，但我预算实在是不够了，也不想等，因为 12 代 u 开始涨价了</p><p><strong>主板</strong>：说实在的，我这个主板买贵了，更好的选择是去拼多多买，因为即使拼多多跟咸鱼的质量一样，拼多多还是全担保交易，有问题方便退换，有客服，也不会催你收货。并且很多咸鱼卖家也都是转的拼多多的货。但我没用过拼多多就没考虑。还需要注意的是，这个主板是只有两个内存条插槽</p><p><strong>内存</strong>：内存的话建议直接上 16G 单条的，根据预算和需要追加条数，一般 32g 够了，这个主板也就支持两个内存通道，2666 频率就行，再高主板一般也不支持，价格贵了感知其实并没有那么明显，不如扩展内存大小，正常装机也是，极致的游戏党和土豪玩家或者性能党、有明确需要的玩家再考虑频率就行。</p><p><strong>散热</strong>：自带的没得说</p><p><strong>拓展</strong>：因为 h610m 原生 4 个 sata 口，而有两个 m.2 槽，所以就买了一个 m2 转 sata（五口）的拓展卡，也可以用 pcie 转 sata，但是我还想要在 pcie 口加装个风扇所以就没考虑。</p><p><strong>电源</strong>：还是用的旧电源，7025b，这也是对盘位考量的妥协，因为 8 盘位的话我就要换机箱了，因为硬盘启动有一个瞬时电流，数据挺高的，7025b 带 6 个硬盘（5 个 16t）有余，但是 8 个（假设 6 个 16t）就说不准了，而放满六块 16T 但是容量还不够的话，就说明该阶段已经毕业了，就该换另外的平台了（玩 pt 疯狂保种的另说，指正常存资料和中轻度 pt）</p><p><strong>其他</strong>：硅脂的话别人都说三四次，可是我两次都觉得勉强，跟个人涂抹习惯有关，我是为了给自己主机也换一下硅脂才用的这款，如果没有其他额外需求，换个一般点的硅脂就行</p><p><strong>总结</strong>：如果预算不够，可以缩其他的，板 u 尽量不要缩，内存条可以用一根 16G 的，机箱可以物色一个便宜的，硬盘不太多的话可以先不用 sata 拓展卡，又可以省出四百多。</p><h3 id="二、如何选-cpu？"><a href="#二、如何选-cpu？" class="headerlink" title="二、如何选 cpu？"></a>二、如何选 cpu？</h3><h3 id="cpu-代数的选择"><a href="#cpu-代数的选择" class="headerlink" title="cpu 代数的选择"></a>cpu 代数的选择</h3><p>很多人比较排斥 12 代的 u 除了日渐增长的价格（估计是为 13 代 u 做铺垫，不然谁还买 13 代 u），就是 12 代 u 对黑裙的支持和 emby 解码的兼容性问题。因此望而生畏</p><p>这个我也无解，都是等大佬出解决方案，但是因为我用的 unraid 系统，没有这个问题，流媒体平台我还没有养成习惯，jellyfin 才是我的第一选择，plex 是第二选择</p><p>当然 10400、8100 这些经典型号也不是不能选择，但是 12100 综合来看只要在 750 以内都尽量它吧</p><p>性价比并不只是价格优劣，更多的是性能和后续。12 代在未来几年是不会过时的，还是那句话，进可功退可守。当 nas 足够，退休了当主力机也行。尤其是家里有孩子的，退休后给孩子组电脑岂不是美滋滋？</p><p>如果你是垃圾佬或者非常有经验的话那看自己的心情购买就好，但我作为一般人，处于多种考量我是不太愿意卖配件的，因此更喜欢着眼于长期使用和永久持有的路。还有另一个考量就是功耗，新老版本提升的不只是性能，我第一套配置待机功耗和下面这套是一样的你敢信？当然技术是有瓶颈的，近几代的处理器功耗都大差不差，提升没有那么明显了</p><p>ps：unraid 6.10.x 版本硬解没有问题，6.9.x 有问题，可以选择升级为 6.10.x 的系统，但我下一篇文章是以 6.9.2 为基础的，给的安装包也是 6.9.2 的，6.10.x 的开心版已经出来了，操作是一样的操作，只是系统包不一样，最新的系统在恩山论坛有，一搜就行了，也不是我的原创，我不好意思这么就转载</p><h3 id="cpu-后缀的选择"><a href="#cpu-后缀的选择" class="headerlink" title="cpu 后缀的选择"></a>cpu 后缀的选择</h3><p>无后缀：普通 cpu，有核显但是不能超频，价格正常</p><p>f 后缀：无核显版本，组无限卡的 nas 必然不会考虑，价格较低</p><p>k 后缀：可以超频，组 nas 用不到，性能党和游戏党可以考虑，价格较高</p><p>t 后缀：低功耗版本，价格有 10-20%的溢价，然而实际使用上待机区别不大，只是满载上限有点差异，性能还被阉割了一部分，除非你家电费几块钱一度，不然也没必要</p><p>这四种情况是最常见的，我们选无后缀的普通 cpu 就可以了，还有一种特殊的情况</p><p>es、qs 版本：两者定义差不多，属于工程测试 U，系统一般识别为“0000”，优点是价格低廉，缺点是容易有问题、不稳定、兼容性也有问题，适合有经验的垃圾佬，或者纯粹折腾的机子，一般我们还是选正式版的 u</p><h3 id="解码视频选择什么-U？"><a href="#解码视频选择什么-U？" class="headerlink" title="解码视频选择什么 U？"></a>解码视频选择什么 U？</h3><p>12 代 CPU</p><p>12400（包含）以下核显都是 UHD730，一般来说 gt740 的级别。</p><p>12500（包含）以上核显都是 UHD770，一般来说 gtx650 的级别。</p><p>八代 CPU 核显基本上都是 UHD630 相当于 gt730 的级别，支持 4K 解码绰绰有余</p><p>另一个常用来组 nas 的 u g5400 核显是 UHD610 用来解 4k 也不是不行，但一般比较吃力，用的人也挺多的，不过就不如 g5500 了，它的核显是 UHD630 解 4k 绰绰有余，它们价格也差不多（所以 g5400 能卖这么贵就离谱）</p><p>所以单看视频解码，如果没有其他需求，上 g5500 完全可以，上八代 U 也合情合理</p><p>看个人根据自己情况的综合考虑吧</p><p>CPU 详细信息查询：<a href="https://ark.intel.com/content/www/tw/zh/ark.html#@PanelLabel122139">https://ark.intel.com/content/www/tw/zh/ark.html#@PanelLabel122139</a></p><p>“處理器顯示晶片”栏的第一行就是核显型号</p><h3 id="因此-cpu-推荐是："><a href="#因此-cpu-推荐是：" class="headerlink" title="因此 cpu 推荐是："></a>因此 cpu 推荐是：</h3><p>12400 ＞ 12100 ＞ 10400 ＞ 10100 ＞ 8 代 u ＞ g5500 ＞ g5400</p><p>（从贵到便宜，高性能到低性能）</p><h2 id="二、如何选主板？"><a href="#二、如何选主板？" class="headerlink" title="二、如何选主板？"></a>二、如何选主板？</h2><p><strong>芯片组</strong>：主板其实没什么好说的，先看自己的性能需求，然后根据性能需求选 CPU，cpu 选了，主板也就没什么选择了，比如选了 12 代 cpu，他的针脚接口是 LGA 1700，那就只能用 h610、b660、h670、z690 这几款。其中 h610 算是入门款式，b660 是比较火热的款式。那就根据需求在这两者之间选择就行了。具体的型号一般百度都能直接搜到，直接搜“xx 代 U&#x2F;XXU 搭配什么主板？”就行了。</p><p><strong>型号_供电</strong>：敲定了范围就要开始细选了，不同的主板有不同的特色，比如 b660 被称之为“最强供电”，但我们组件 nas，cpu 功耗没那么高，即使组 pc，不带 3080 那种高端显卡，h610 也完全够用，真到了那个级别当前的 u 和主板肯定也得换。</p><p><strong>型号_拓展</strong>：还需要注意的就是主板的拓展性能，比如 b660 主板是有 pcie4.0 通道的，而 h610 是 3.0</p><p>z690 支持 cpu 超频而其他的都不支持</p><p>以及 h610 和 b660 主板原生是 4 个 sata 口（微星 b660 有 6 个），h670 和 z690 原生 6 个 sata 口</p><p>这是主板型号之间的差异，再细分不同品牌方也推出了不同的子型号，比如 sata 口朝向、m2 口数量，内存插槽数量、pcie 插槽规格等等就比较细分了，可以看需求和价格综合考量</p><p><strong>品牌</strong>：选定了型号就得选牌子，同一型号的主板价格差距能到好几百的，这个取决于主板的用料、拓展、性能、规格等等，常见的一线主板频道有华硕微星技嘉，其中前两者用料比较扎实价格也贵点，技嘉用料一般价格也便宜点。另外还有华擎铭瑄也都是比较稳的品牌，其他小牌的优点可能就是便宜了。但有一说一，买二手的话，选大牌的挺香的，没必要图极致的便宜。比如买了华硕的主板（买带保的别忘了），使用中有一些小问题不明白的话直接打华硕客服电话可以咨询，比小牌有保障的多，如果坏了也可以送去维修很方便</p><p><strong>尺寸</strong>：主板一般分为 ITX 和 ATX，其中 ITX 是 17*17cm 的小板，入门款 nas 基本都是用的 itx 主板，选择少，价格高，限制多。但是综合价格便宜。如果有预算必须得换大点的机箱，才能用大主板，也不用太大。</p><p>ATX 主板又分为：MATX、普通 ATX、加大 ATX。matx 在中高端 nas 和一般的日用电脑上很常见，尺寸比较多，但都在 24*24cm 以内。这个主板可玩性高，占用空间又不大，适用范围广。再往上目前不考虑，</p><p>比如本文说的 h610、b660 严谨点就是 h610m、b660m，带 m 后缀的就是 matx 主板，这点跟 cpu 一样的</p><p><strong>总结</strong>：所以其实主板没什么好选的，确定了 cpu 就相当于确定了主板，你如果用 12100 选 h610 没毛病，你如果用了 12400 选 b660 没毛病，你如果用了 12700 以上选 h670、z690 也没毛病，牙膏厂的板子很好选的，没有强制的规定，但搭配基本上都是固定的。</p><p>比如你用了 12400 那真的推荐 b660 而不是 h610，你用 12100 也可以选择 b660 甚至是更高，有预算我也说了真的推荐 b660，拓展性能更好，但如果需求固定了，12100+b660 会有很多闲置性能，有利有弊，利于 cpu 升级而不更换主板，弊端就是不升级白瞎一部分性能升级了多出一个 cpu，所以建议一开始根据自己的需求和预算考量好，12400+b660 也很香呀。（虽然都是买前生产力买后爱奇艺）</p><p>之后可以京东淘宝搜下选中的型号，看看不同品牌及子型号之间的差异，根据自己的需求敲定就行了</p><h2 id="三、如何选内存？"><a href="#三、如何选内存？" class="headerlink" title="三、如何选内存？"></a>三、如何选内存？</h2><p><strong>内存规格</strong>：目前比较主流的规格是 ddr4，不是古早主板基本上都支持，新主板更不用提，ddr3 太旧，ddr5 太超前，ddr4 刚刚好。兼容性好、价格便宜、选择多、适用范围广</p><p><strong>内存频率</strong>：目前主流的频率有：2133、2400、2666、3000、3200、3600。理论上自然是频率越高越好，虽然很多主板比如 h610 说他丐人家支持 3200mhz 的内存频率，但是也没必要，2666mhz 频率的内存综合性价比更高，因为除了 3a 游戏党、跑分党、极致性能党、土豪之外，你是感觉不出什么太大的差异的。</p><p>这个是符合边际效应了，前两个馒头顶饱，但后面就是花高代价满足小需求，不如提升单条容量和数量</p><p>单双通道：虽然很多人都是吹双通道速度是单通道的一倍，跟 3200 远大于 2666 差不多，理论上是这样，可实际上，就把自己锁死了。你上一个 16G 单条，有预算再追加一条。跟你直接上两根 8g 单条相比，短期看是后者优，但是长期看，这 8g 单条早晚要卖了嫌便宜用了嫌小。再者诸如 h610 主板只有两个内存插槽。</p><p>我主机四根 8g 的美商海盗船 3200mhz 的内存条，因为主板兼容性问题一直是用的 2133mhz，我没有感觉到有什么差异，而且现在想要升级代价太高了，八 g 内存条根本没地方用</p><p>这个跟硬盘选购是一样的，我就建议上 3 块 4t 硬盘满足不了需求的时候，直接上一块 16T，因为中间的早晚要处于尴尬的低位，18T 及往上性价比和兼容性也可能有问题。有些事情表面上看着是利好低预算玩家，实际上是真的在迫害低预算玩家</p><p>内存品牌：内存品牌很多，但是直接搜【16G 内存条 2666mhz】看到哪个便宜又听说过的品牌买就行了，这个价位要什么自行车（但不推荐咸鱼买，咸鱼很多换颗粒的假内存条的，尤其是某士顿更是重灾区）</p><h2 id="四、如何选机箱？"><a href="#四、如何选机箱？" class="headerlink" title="四、如何选机箱？"></a>四、如何选机箱？</h2><p><strong>机箱</strong>：机箱的选择其实更少，要么</p><p><strong>nas 机箱</strong>：封闭式、硬盘笼、迷你、稳定对硬盘友好、就是为 nas 设计的空间利用率高</p><p><strong>普通机箱</strong>：普通机箱，有诸如半岛铁盒硬盘位多的，但没有 sata 背板、用料感觉也不稳、共振对硬盘损伤很大的</p><p><strong>开放式&#x2F;高度 diy 机箱</strong>：没啥好说的</p><p><strong>服务器&#x2F;机柜</strong>：这个其实也挺好，比如惠普、浪潮等服务器机箱用来弄 nas 也挺好，但这就属于我第三步的范畴了，目前不考虑，机箱成本不高但是附属成本高（因为是需求推动着升级）</p><p>一般我们都是选普通的 nas 机箱</p><p><strong>价位&#x2F;盘位</strong>：目前 nas 机箱选择真的很少</p><p><strong>四盘位</strong>：咸鱼 100 以内你能淘到星际蜗牛四盘位机箱，200 以内淘个新的轻轻松松</p><p><strong>六&#x2F;八盘位</strong>：价格就瞬间上来了，这可以参考我的【“强中丐”配置】里面对机箱的点评，经济实惠的还有拓普龙八盘位五百多能淘到。但是其他的都是八百左右浮动了，机箱品牌也就那么些。这还比较推荐的</p><p>还有一些机箱，一般都是 diy 的，出货量很少，现在就买不到了或者价格很高，diy 是这样的，一千多五盘位都有，不见得一分价钱一分货，毕竟价格不全看质量还得看综合成本，量多成本分摊才能便宜。那些上千的基本上都是小圈子定制款，量多了照样八百多。价格高怎么办？制作方可能就会在其他方面有小心思，就跟散热风扇的 rgb 一样，不加花里胡哨的功能怎么理所当然的涨价</p><p>还有一我购买的 tank 这款如果硬盘位能有八个那就是真的完美了，目前只能说有点小瑕疵。具体你可以根据自己的需求对比下不同机箱的附加服务（背板质量、外观设计、客服团队等）综合考量</p><h2 id="四、如何选电源？"><a href="#四、如何选电源？" class="headerlink" title="四、如何选电源？"></a>四、如何选电源？</h2><p><strong>规格</strong>：电源也是有规格的</p><p>电脑常用的 ATX（150<em>140</em>86mm(W<em>D</em>H)），迷你主机常用的 SFX（125<em>100</em> 63.5mm(W<em>D</em>H)）</p><p>服务器（含 nas）常用的 FLEX（俗称小 1U 电源）（150<em>81.5</em>40.5MM(W<em>D</em>H)）</p><p>基本上所有 nas 机箱都是用的小 1u 电源，其中益衡的质量、性价比、保障都比较突出，用户群也很多，但必须买全新的，淘宝有两家授权店，咸鱼的假货泛滥。益衡改电源风扇也是有保的，利好折腾党。海韵用的人也挺多，质量也不错。一般 6 盘位（6 个 16t（不含）以下）没有额外的拓展 7025b 完全可以满足需求，7025b 功率是 250w。</p><p>如果拓展比较多、硬盘位多建议电源提一个档次。8 盘位等空间比较大的机箱可以用 atx 电源</p><p><strong>瞬时电流</strong>：电源不只是看功耗，正常 nas 没有过多拓展，高性能的板 u 加 6 个 16t 硬盘待机撑死 80w，满载撑死 200w，电源的另一个指标是电流，比如 7025b，在它们的【宝贝详情页】里都有参数，12V 的输出电流是 18A，一块 16T 硬盘启动电流至少为 2A（没测过，大概数），同时启动的话，电源扛不住，电流不稳容易损坏硬盘，就跟飞机一样，最危险的时候不是正常飞行，而是起飞与落地。</p><p>这个问题也不是没法解决，但需要硬件支持，现在稍微贵点的机箱的 sata 背板都支持顺序通电，可以很大程度缓解这个问题，但要保证绝对的稳定运行的话，我建议还是要提高电源档次</p><p>这也是说为什么电源最重要，电源不稳定的话，真就 all in boom 了</p><h2 id="五、其他配件的选择"><a href="#五、其他配件的选择" class="headerlink" title="五、其他配件的选择"></a>五、其他配件的选择</h2><p><strong>硬盘</strong>：我就不说了，等了解更深入了会单独开文章介绍，现在就不自作聪明了</p><p><strong>sata 线</strong>：第一次装机买几根就行，要注意的就是主板 sata 口和其他配件是否冲突用不用买弯的那种异性头，后面就不用买了，这次这个 tank 机箱带六根 sata 线，我现在闲置了十来根 sata 线了</p><p><strong>散热</strong>：散热的话如【“丐中强”配置】里面的点评所说，选个普通品牌注意是否和主板上的小零件冲突就行了，冲突的话剪掉散热别动主板</p><p><strong>硅脂</strong>：一般 cpu、主板甚至是机箱卖家都会带硅脂（请提前沟通），但是都是非常一般的硅脂，想要好点可以买利民的硅脂，就是价格挺贵的</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://yurik.cafe/tags/%E8%BD%AC%E8%BD%BD/">转载</category>
      
      <category domain="https://yurik.cafe/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</category>
      
      <category domain="https://yurik.cafe/tags/NAS/">NAS</category>
      
      
      <comments>https://yurik.cafe/2024/nas-hardware-guide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」这世界有那么多人</title>
      <link>https://yurik.cafe/2024/thought-memories/</link>
      <guid>https://yurik.cafe/2024/thought-memories/</guid>
      <pubDate>Sat, 02 Mar 2024 17:49:26 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;这世界有那么个人，活在我飞扬的青春&lt;br&gt;在泪水里浸湿过的长吻，常让我想啊想出神&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再一次听到这首歌，还是不自觉的跟唱。&lt;/p&gt;
&lt;p&gt;上高中两年了，还是总会想到初中的事。与我小升初时转入另一个的学区不同，上</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>这世界有那么个人，活在我飞扬的青春<br>在泪水里浸湿过的长吻，常让我想啊想出神</p></blockquote><p>再一次听到这首歌，还是不自觉的跟唱。</p><p>上高中两年了，还是总会想到初中的事。与我小升初时转入另一个的学区不同，上了高中的我还是能见到他们，打招呼，是一件刻在骨子里的习惯。</p><p>我可能是一个私下里比较感性的，对于分别，我是难以接受的。但通过互联网能再次阅读他们的文字，体会他们表达的感情，是一件很奇妙的事。</p><p>『这世界有那么多人』总让我想到分别。</p><p>早先国 V 刚刚开始起步，彩虹社与 B 站成立了 VirtuaReal。B 站对 VR 的一期生做了很多宣发，我大抵是当时关注<strong>爹</strong>的，后来就躺在我的关注列表里，一直没看过了。重新记起爹是因为「我开动物园那些年」的 OP 和「<a href="https://www.bilibili.com/video/BV1SE411V78E/">夭夭</a>」，而重新看爹的直播&#x2F;录播是因为她当时打 Apex 和 MC，迷于爹的「琉声电台」。当时的「琉声电台」是我初二时每天写完作业的哄睡音频。</p><p>初三时因为学校的安排，班级从走读转为住校，一同告别的便是每日都可以接触到的手机与电脑。当时求了我妈一个多月，才终于同意给我买了一块 Oppo Watch 2，小小的安卓表，让我与学校围墙外的世界重新建立了联系，也让我得知了那个紫发女孩毕业了。</p><blockquote><p>弹幕：好像去 VR 做 Ru 爹的同事啊。 Ru：（沉默）也有可能到时候我就是你的前同事了。</p></blockquote><p>当然，互联网也不是杳无音讯，那段时间，我不记得听了多少次<a href="https://www.bilibili.com/video/BV14j411f79e">初号机的告别视频《再见》</a>和这一首女水友唱的<a href="https://www.bilibili.com/video/BV1H3411h7mN">《这世界那么多人》</a></p><p>当时正值中考前，可能人也变得伤感了吧。与朋友的分别，D 的管人的毕业，组成了这首歌留在记忆里的画面。</p><p>心中感慨良多，却难以写出，诸君权当一笑尔。</p><blockquote><p>看管人不要入脑。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2024/thought-memories/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「重要」站点Icon变更通知</title>
      <link>https://yurik.cafe/2024/new-avatar/</link>
      <guid>https://yurik.cafe/2024/new-avatar/</guid>
      <pubDate>Wed, 28 Feb 2024 17:05:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;站点公告&lt;/strong&gt; 本站于 2024 年 2 月 29 日零时启用新的 icon 并将其 URL 地址迁回至站点源地址。&lt;/p&gt;
&lt;p&gt;烦请各位友站将原先的 unpkg 源地址修改为新地址。&lt;/p&gt;
&lt;p&gt;仅需将原先地址中的 &lt;code&gt;https:</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>站点公告</strong> 本站于 2024 年 2 月 29 日零时启用新的 icon 并将其 URL 地址迁回至站点源地址。</p><p>烦请各位友站将原先的 unpkg 源地址修改为新地址。</p><p>仅需将原先地址中的 <code>https://unpkg.com/yurik-static@1.0.6/</code> 修改为本站地址 <code>https://yurik.cafe</code> 即可</p><p>如 <code>https://unpkg.com/yurik-static@1.0.6/favicon/v2/favicon.ico</code> -&gt; <code>https://yurik.cafe/favicon/v2/favicon.ico</code></p><p>icon 列表及对应地址可查看 <a href="/favicon/v2/">&#x2F;favicon&#x2F;v2&#x2F;</a></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/announces/">站点公告</category>
      
      
      
      <comments>https://yurik.cafe/2024/new-avatar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「游戏开发」我的小鲨鱼 By Unity</title>
      <link>https://yurik.cafe/2024/warma-shark-unity/</link>
      <guid>https://yurik.cafe/2024/warma-shark-unity/</guid>
      <pubDate>Sat, 24 Feb 2024 13:25:15 GMT</pubDate>
      
      <description>创意、美术: WARMA | 《我的小鲨鱼》的 UNITY 实现</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h1><blockquote><p>本游戏创意、美术来源于 B 站知名 UP 主 Warma。本作仅为原游戏的 Unity 实现，未经原作者与本人许可不得用于商业用途</p></blockquote><p>创意、美术: <strong>Warma</strong> | 开发：<strong>景蓝 Yurik</strong></p><p><strong>《我的小鲨鱼》的 UNITY 实现</strong></p><p><a href="https://www.bilibili.com/video/BV1fb4y1P7Y1">原视频</a></p><iframe src="//player.bilibili.com/player.html?aid=624026347&bvid=BV1fb4y1P7Y1&cid=1414155015&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p>来领养一只电子小鲨鱼吧！<br>给它喂食、让它锻炼、看它睡觉，这一切看起来就像治愈快乐的宠物养成游戏一样。<br>尽管小鲨鱼是弱小的，面对一切都是无能为力的。<br>但请放心，无论发生了什么，电子小鲨鱼仍然爱你。<br>游戏总共包含 11 个普通结局和 2 个最终结局，根据你对小鲨鱼做过的事情，游戏将走向不同的结局。<br>来和小鲨鱼成为朋友吧！</p><p><img src="/2024/warma-shark-unity/cover.jpg"></p><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><ul><li>2024&#x2F;2&#x2F;19 - 制作了语言选择页面</li></ul><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>当前游戏还未开发好</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/projects/">项目</category>
      
      
      <category domain="https://yurik.cafe/tags/Unity/">Unity</category>
      
      <category domain="https://yurik.cafe/tags/game-dev/">游戏开发</category>
      
      
      <comments>https://yurik.cafe/2024/warma-shark-unity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用 Hexo 搭建静态博客</title>
      <link>https://yurik.cafe/2024/hexo-guidebook-1/</link>
      <guid>https://yurik.cafe/2024/hexo-guidebook-1/</guid>
      <pubDate>Sat, 17 Feb 2024 18:33:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想到年，我曾经写过「&lt;a href=&quot;/2022/hugo-blog/&quot;&gt;使用 Hugo 搭建个人博客&lt;/a&gt;」一文，现在又来转投 Hexo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想到年，我曾经写过「<a href="/2022/hugo-blog/">使用 Hugo 搭建个人博客</a>」一文，现在又来转投 Hexo 的怀抱了。</p><h1 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h1><p>Hexo 是一款基于 Node.js 的静态博客框架，它具有轻量、快速、简洁且高效的特点。它可以将 Markdown 语法转换为 HTML，方便用户编写博客文档。Hexo 支持使用 node 命令进行一键部署到 GitHub Pages、Heroku 或其他平台，非常适合个人博客的搭建。此外，Hexo 还具有丰富的插件和主题，可以满足用户的不同需求。</p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Hexo 依赖于 Node.js 环境，因此确保你的计算机已经安装了 Node.js 和 npm (同时你也可以使用 yarn 来管理你的 Node.js 包)</p><h2 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h2><p>hexo-cli 是 Hexo 官方的命令行管理工具，它提供了快速新建、发布、部署博客等功能。</p><p>你可以通过 npm（或 yarn，下文不再赘述）安装 hexo-cli</p><p>在终端中执行以下命令来安装 hexo-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm</span><br>npm install hexo-cli -g<br><br><span class="hljs-comment"># yarn</span><br>yarn global add hexo-cli<br></code></pre></td></tr></table></figure><blockquote><p>我们将提供 npm 和 yarn 的命令，请根据你的情况选择<br>下同</p></blockquote><h1 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h1><h2 id="生成站点目录"><a href="#生成站点目录" class="headerlink" title="生成站点目录"></a>生成站点目录</h2><p>接下来，你需要创建一个新的 Hexo 博客项目。在终端或命令提示符中，导航到你想要创建博客的目录，然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init folder<br></code></pre></td></tr></table></figure><p>其中 folder 改为目标文件夹名称（下同），如果在当前文件夹初始化的话就执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init .<br></code></pre></td></tr></table></figure><p>此时目标文件夹中会生成以下文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tree">.<br>│  .gitignore              # git提交时的省略文件<br>│  package.json            # Node.js项目描述和依赖管理文件<br>│  _config.landscape.yml   # Hexo 初始主题 Landscape 的配置文件<br>│  _config.yml             # Hexo 站点配置文件<br>│<br>├─scaffolds                # Hexo生成文章时的结构模板<br>│      draft.md<br>│      page.md<br>│      post.md<br>├─source                   # Hexo站点源文件<br>│  └─_posts                # 博文文件夹<br>│          hello-world.md<br>├─themes                   # 主题文件夹<br>│       .gitkeep           # 告诉git要保留这个空文件夹<br>│<br>├─node_modules             # Node.js 依赖包存放<br>│<br>└─.github                  # 使用Github来自动部署Hexo的配置文件<br></code></pre></td></tr></table></figure><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><h3 id="进入站点文件夹"><a href="#进入站点文件夹" class="headerlink" title="进入站点文件夹"></a>进入站点文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> folder<br></code></pre></td></tr></table></figure><h3 id="使用包管理器安装-Node-js-依赖包"><a href="#使用包管理器安装-Node-js-依赖包" class="headerlink" title="使用包管理器安装 Node.js 依赖包"></a>使用包管理器安装 Node.js 依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm</span><br>npm i<br><br><span class="hljs-comment">#yarn</span><br>yarn<br></code></pre></td></tr></table></figure><h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><h2 id="config-yml-配置"><a href="#config-yml-配置" class="headerlink" title="_config.yml 配置"></a>_config.yml 配置</h2><p>进入你创建的博客文件夹，你将看到一个名为_config.yml 的文件，这是 Hexo 的配置文件。你可以根据自己的需求修改该文件，例如设置博客标题、域名、文章路径等。</p><p>参数详解请参考<a href="//hexo.io/zh-cn/docs/configuration">Hexo 官方文档</a></p><h2 id="package-json-配置"><a href="#package-json-配置" class="headerlink" title="package.json 配置"></a>package.json 配置</h2><p><code>package.json</code> 是 Node.js 项目描述和依赖管理文件，你可以在 <code>package.json</code> 中添加以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;g&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo deploy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样使用以下语句就可以逐条执行 <code>清理静态文件-&gt;生成静态文件-&gt;部署开发服务器</code>三个过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm run s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn s<br></code></pre></td></tr></table></figure><h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><p>在站点根目录使用终端，执行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post &lt;your-post-name&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;your-post-name&gt;</code>修改为你的文章名称（英文）</p><p>之后在<code>source\_posts\&lt;你的自定义路径&gt;\</code>中将会生成<code>&lt;your-post-name&gt;.md</code>文件，使用 Markdown 语法编辑即可开始写作</p><h1 id="渲染-HTML-文档"><a href="#渲染-HTML-文档" class="headerlink" title="渲染 HTML 文档"></a>渲染 HTML 文档</h1><p>若你已经按照<a href="#package-json-%E9%85%8D%E7%BD%AE">上文</a>配置了<code>package.json</code>文件，你可以执行以下命令来生成静态 HTML 文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm</span><br>npm run g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">yarn</span><br>yarn g<br></code></pre></td></tr></table></figure><p>当然你也可以手动执行 Hexo 命令来逐步生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清理原public文件(必须)</span><br>hexo clear       # hexo cl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成静态文档</span><br>hexo generate    # hexo g<br></code></pre></td></tr></table></figure><p>生成的静态文档将出现在目录下<code>public</code>文件夹中，你可以将它上传至你的网页服务器或者 gh-pages 等 serverless 服务中</p><h1 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h1><h2 id="开启文章资源文件夹"><a href="#开启文章资源文件夹" class="headerlink" title="开启文章资源文件夹"></a>开启文章资源文件夹</h2><p>Hexo 默认不开启文章资源文件夹，所有的图片都直接读取<code>source</code>文件夹中的非<code>_</code>开头目录中文件，这并不方便图片管理。</p><p>你可以在<code>_config.yml</code>中将<code>post_asset_folder</code>设置为<code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当在 <code>post_asset_folder</code> 为 <code>true</code> 时，Hexo 会在你创建新文章时自动生成一个与文章同名的文件夹。</p><p>在 Markdown 文件中引用图片时，你可以使用相对路径来指向这个文件夹中的图片文件。例如，如果你有一张名为 <code>image.jpg</code> 的图片放在 <code>my-article</code> 文件夹中，你可以在 <code>my-article.md</code> 文件中使用 <code>![](image.jpg)</code> 的语法来引用这张图片。</p><p>通过使用 <code>post_asset_folder</code> 功能，你可以更好地组织和管理 Hexo 博客中的文章和资源，提高写作和发布的效率。</p><div class="alert alert-danger" role="alert">  如果你要配置封面时不可以使用上文提及的相对路径，而是应该使用相对站点根目录的路径，如<code>/my-article/image.jpg</code></div><h2 id="配置文章存储路径"><a href="#配置文章存储路径" class="headerlink" title="配置文章存储路径"></a>配置文章存储路径</h2><p>Hexo 默认将所有文章全部存放在<code>source\_posts</code>下，这并不利于按时间管理文章</p><p>你可以在<code>_config.yml</code>中修改<code>new_post_name</code>设置来设置文章存放路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year/:month/:title.md</span><br></code></pre></td></tr></table></figure><p>相关变量请参考<a href="//hexo.io/zh-cn/docs/permalinks">Hexo 官方文档</a></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>你可以为自己的 Hexo 站点安装不同的主题，具体主题配置请参考相关主题文档</p><p><a href="//hexo.io/themes/">Hexo 主题列表</a></p><h1 id="Enjoy-Your-Writing"><a href="#Enjoy-Your-Writing" class="headerlink" title="Enjoy Your Writing"></a>Enjoy Your Writing</h1><p>:D</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://yurik.cafe/tags/Hexo/">Hexo</category>
      
      <category domain="https://yurik.cafe/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
      
      <category domain="https://yurik.cafe/tags/%E5%BB%BA%E7%AB%99/">建站</category>
      
      
      <comments>https://yurik.cafe/2024/hexo-guidebook-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「项目」Hexo 主题 News 现已上线</title>
      <link>https://yurik.cafe/2024/hexo-theme-news/</link>
      <guid>https://yurik.cafe/2024/hexo-theme-news/</guid>
      <pubDate>Wed, 31 Jan 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2024/hexo-theme-news/banner.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所见，我给博客换上了一个新主题。&lt;/p&gt;
&lt;p&gt;与别的主题不同的是，这个主题是我从 1 开始制作的。为什么是从 1 开始？因为这个主题我参考了 &lt;a href=&quot;h</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2024/hexo-theme-news/banner.webp"></p><p>如你所见，我给博客换上了一个新主题。</p><p>与别的主题不同的是，这个主题是我从 1 开始制作的。为什么是从 1 开始？因为这个主题我参考了 <a href="https://www.apple.com.cn/newsroom/">Apple 公司的 Newsroom 页面</a>，也使用了部分 Apple 的 CSS 样式表（主要是文字相关部分），因此这个主题也被我命名为<strong>News「新闻中心」</strong>。这篇博文是制作<strong>News「新闻中心」</strong>主题的记录。</p><h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>最开始的想法是在给班级网站写新闻中心页面。当时给网站主页使用的 Bootstrap 5 的 Jumbotron 模板，想着设计一个和他向契合的新闻页面，突然我想到了之前看到的 Apple Newsroom 我十分喜欢，于是便用 Bootstrap 的 Card 放置了一个差不多的页面出来，这可以称为是<strong>News「新闻中心」</strong>的 <strong>α1</strong> 测试版本。</p><blockquote><p>此处因保护隐私原因不放出参考网址</p></blockquote><p>之后这个站点便因为准备期考而暂停了更新，但我仍时不时的对他的样式表做一点细微的调整，直到期考结束。期考结束的这个寒假，我按照计划维护着博客，突发奇想要不把之前写的「新闻中心」改成主题吧！</p><p><strong>说干就干</strong></p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>我使用的是 <a href="https://www.npmjs.com/package/yo">YO(Yeoman generators) 生成器</a>来创建的 Hexo 主题模板，使用的 EJS 模板语言和 CSS 样式表，具体的技术细节就不再文中赘述了。我感觉主题的开发就和使用 PHP 写程序一样，要注重代码的<strong>“复用”</strong>，即模块化编程，将不同的组件单独编写，按需调用，省去了重复造轮子的麻烦。</p><p>目前，<strong>News「新闻中心」</strong>已经实现了以下功能：</p><ul><li>基础文章的渲染</li><li>友情链接页面</li></ul><p>计划实现的功能：</p><ul><li>灯箱 Fancybox</li><li>完善配置文件</li><li>代码高亮</li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p><strong>News「新闻中心」</strong>具有以下特性：</p><ul><li>使用了最新的 Bootstrap 5 作为框架，「新闻中心」支持其全部组件和特性</li></ul><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>以下项目在 Newsroom 开发时提供了无可取代的帮助，特在此表达诚挚的谢意（排名不分先后）</p><ul><li><p>设计灵感和部分 CSS 代码来自：<a href="//apple.com.cn">Apple Inc.</a></p></li><li><p>导航栏动画来自：<a href="https://nero978.top/">Nero978</a> | <a href="https://github.com/Miracle-Town/mt-web">Miracal Town&#x2F;mt-web</a></p></li><li><p>Hexo 主题启蒙，提供了部分样式和脚本代码：<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a></p></li><li><p>默认随机封面图来自我使用的第一个博客主题：<a href="https://github.com/BigCoke233/miracles">BigCoke233&#x2F;Miracles</a></p></li></ul><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><div class="alert alert-danger" role="alert">  警告：<b>News「新闻中心」</b>因个人原因无限期停止开发。</div><a href="https://github.com/ImJingLan/hexo-theme-news" target="_blank" type="button" class="btn btn-outline-dark btn-lg w-100" ><i class="bi bi-github"></i> ImJingLan/hexo-theme-news</a>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/projects/">项目</category>
      
      
      <category domain="https://yurik.cafe/tags/Hexo/">Hexo</category>
      
      <category domain="https://yurik.cafe/tags/Hexo-%E4%B8%BB%E9%A2%98/">Hexo 主题</category>
      
      
      <comments>https://yurik.cafe/2024/hexo-theme-news/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用 GitHub Actions 部署 Hexo</title>
      <link>https://yurik.cafe/2024/github-action-depoly-hexo/</link>
      <guid>https://yurik.cafe/2024/github-action-depoly-hexo/</guid>
      <pubDate>Mon, 15 Jan 2024 09:53:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近把博客从 Vercel 迁移到了 Netlify 了，这两家都是 ServerLess 部署平台，属于完全的无痛迁移了。&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近把博客从 Vercel 迁移到了 Netlify 了，这两家都是 ServerLess 部署平台，属于完全的无痛迁移了。</p><p>无论是 Vercel 还是 Netlify，都对于应用的部署时长有限制，但相对与 Vercel 免费的每月 6000 分钟来说，Netlify 的 300 分钟就略显寒酸了。但自从去年国庆我的网站挂在 Vercel 被墙外加最近 Vercel 访问不畅之后我就在研究 Netlify 了。</p><p>因为直接上传 NPM 包到 Netlify 上部署相比上传静态的 HTML 页面更耗时间，而我最近学习了 Github Actions，Github Actions 提供了每月 3000 分钟的部署时长，因此决定使用 Github Actions 来构建静态页面，之后仅同步静态页面到 Netlify 就完成了。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>首先在仓库中新建一个 deploy 分支用于存放构建完成的静态页面。</p><p>别忘了在 <strong>Setting - Actions - General - Workflow permissions</strong> 中将权限设置为 <code>Read and write permissions</code></p><p>在仓库主分支下的<code>.github/workflows/</code>文件夹新建一个 yml 文件，名称随意，如<code>deploy.yml</code></p><p>随后在 yml 文件下写入以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">部署静态页面到</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">分支</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment">#手动触发</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 获取源码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">迁出代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装node.js环境</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@master</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装Hexo-cli</span> <span class="hljs-string">和</span> <span class="hljs-string">其他</span> <span class="hljs-string">node</span> <span class="hljs-string">环境</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">构建静态页面</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm run g</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">你也可以在这里执行更多Linux命令</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo Example</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">推送到</span> <span class="hljs-string">deploy</span> <span class="hljs-string">分支</span> <span class="hljs-comment"># 部署</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@v4.3.3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">deploy</span> <span class="hljs-comment"># 部署后提交到的分支</span><br>          <span class="hljs-attr">folder:</span> <span class="hljs-string">public</span> <span class="hljs-comment"># 打包好的目录名称</span><br></code></pre></td></tr></table></figure><p>最后 Push 到 Github 就好啦</p><p>别忘了把 Netlify 中的链接仓库重新绑定到 deploy 分支噢</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2024/github-action-depoly-hexo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」我的PHP开发之路</title>
      <link>https://yurik.cafe/2024/my-way-to-php/</link>
      <guid>https://yurik.cafe/2024/my-way-to-php/</guid>
      <pubDate>Wed, 10 Jan 2024 09:45:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;新年已至，自然少不了元旦 Party，今年是我们在高中的第一个元旦派对，当然要做一些不一样的。&lt;/p&gt;
&lt;p&gt;作为班上的网管，我做了一个在线</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新年已至，自然少不了元旦 Party，今年是我们在高中的第一个元旦派对，当然要做一些不一样的。</p><p>作为班上的网管，我做了一个在线的新年祝福页面，让同学们可以在上面填写自己的新年祝福，并在新年时随机分发到每个人的手中（账号上）。</p><p>这一套站点拥有完善的登录、鉴权和还在开发（咕）中的后台管理面板和现代化的前台。</p><p>如这篇文章的标题所示，这次开发的技术栈便是 MySQL 和 PHP。当然，我并不想在这里赘述该系统的开发过程，而是记录一下我的 PHP 开发 &amp; 学习过程。</p><p><img src="/2024/my-way-to-php/1.webp" alt="新年祝福页面"></p><h2 id="初识-PHP"><a href="#初识-PHP" class="headerlink" title="初识 PHP"></a>初识 PHP</h2><p>我的第一个 PHP 小程序至今还躺在我的 Gitee 仓库中（虽然现在已经不用 Gitee 了&#x3D;V&#x3D;），那是一个简单的文件上传程序。当时还是初中，作为网管（对的，我一直是网管），老师让我负责收集同学们的假期实践作业。改作业要求使用 Word 软件进行排版和上传。</p><p>当时的我，刚刚有了一台虚拟主机，出于 QQ 接收文件可能会遗漏且不好统计的想法，我从网上复制&amp;&amp;修改了一段上传&amp;保存文件的 PHP 代码，并上传到了虚拟主机上，当时这个程序使我收集的工作更加便捷，当然虚拟主机的龟速也引来不少同学的友好反馈（笑）。</p><p>作为第一个 PHP 程序，大部分代码都是从网上 Copy &amp; Paste 下来的。因为 PHP 的大部分语法和之前为 NOIP 学习的 C++十分相像，我对程序做了一点修改，添加了格式校验和提交检测功能。</p><p>这便是我的 PHP 基础。</p><p><img src="/2024/my-way-to-php/2.webp" alt="作业提交系统的Commit"></p><h2 id="你好-MySQL"><a href="#你好-MySQL" class="headerlink" title="你好, MySQL"></a>你好, MySQL</h2><p>在我早期的观念中，PHP 和数据库一定密不可分，只是当时偷懒外加没有需求，在作业收集网站后我就再也没有写过 PHP 代码了。而一个站点的出现，让我重拾 PHP 并完成了第一个大项目，那就是<a href="https://zigzagk.top/OIerdictum/">机房大佬语录</a>。</p><p>受到<a href="https://hitokoto.cn/">一言</a> 和 <a href="https://zigzagk.top/OIerdictum/">机房大佬语录</a>的影响，我也想自己搭建一个所谓的“一句话站点”，但苦于没有找到合适的开源项目，于是我决定：</p><p><strong>自己写！</strong></p><p>于是我通过<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程</a>照猫画虎地学习了 MySQL 创建表，插入语句，更新语句等操作，经过几个月地努力，写出了一个还算像点样地随机语句程序 『一句』 <a href="https://github.com/ImJingLan/Sentence">ImJingLan&#x2F;Sentence</a></p><p><img src="/2024/my-way-to-php/3.webp" alt="一句 Logo"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>学习一种新技术主要来自于你对他的需求，只有有了需求，你才有往下学的动力。多看看开源社区，多看看别人的代码，多看文档，哪怕 Copy Paste 呢？</p><p>我的 PHP 代码风格主要受到 Sakura Panle 的影响，这种模块的思路贯彻在了我的所有站点中。</p><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2024/my-way-to-php/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「杂谈」Counter-Strike 2 : 未来已来，时不我待</title>
      <link>https://yurik.cafe/2023/hello-counter-strike-2/</link>
      <guid>https://yurik.cafe/2023/hello-counter-strike-2/</guid>
      <pubDate>Thu, 28 Sep 2023 12:34:21 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;Counter-Strike、Counter-Strike 2、CS:GO 以及它们各自的标识是 Valve Corporation 的商标和&amp;#x2F;或注册商标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;北京时间 2023 年 9 月 28 </description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Counter-Strike、Counter-Strike 2、CS:GO 以及它们各自的标识是 Valve Corporation 的商标和&#x2F;或注册商标。</p></blockquote><p>北京时间 2023 年 9 月 28 日 凌晨 4:40 , <strong>Valve Corporation（V 社）</strong>发布了<strong>反恐精英：全球攻势</strong>（下称 CSGO）有史以来最大的更新</p><p>全新的<strong>反恐精英 2</strong>（下称为 CS2）覆盖了原先的 CSGO 页面，预示着内测 6 个月的 CS2 正式取代 CSGO，称为下一代反恐精英系列游戏</p><p>与 反恐精英 1.6（CS1.6）、反恐精英:起源（CSS）、CSGO 之间的更新不同，本次更新中 V 社直接使用过 CS2 覆盖了原先 CSGO 的页面，这意味着玩家将无法同时游玩 CS2 与 CSGO。不过你依然可以通过游戏属性-&gt;测试版-&gt; <strong>csgo_demo_viewer - 1.38.7.9</strong> 来启动 CSGO</p><p>今天这篇文章，咱们不聊 CS2，而是聊聊我与 CS 的故事，权当一篇琐记吧</p><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>我玩的第一款 FPS，就是 CS 了。那时候我 5 岁，我哥便带我玩 CSOL（虐我）。当时主要是打一些大灾变之类的生化模式。有一次，我哥问我知不知道 Steam，我还记得他还提了一嘴：“知不知道 CSGO？”那年，我 10 岁</p><p>缘分总是很巧，第二年，2017 年，我忽然想起了这款游戏，便去网上搜索了一下。那时候，CSGO 国服刚刚开始内测。</p><p>我大概是第二批国服内测玩家，在游玩了几天国服之后，我又花钱购买了国际服的优先（那时候 CSGO 还是一个付费游戏）。</p><p>后来，我对于他的兴趣渐渐消失，逐渐的，他便成为我 Steam 库中静静的一员。</p><p>直到初一。</p><h1 id="重逢"><a href="#重逢" class="headerlink" title="重逢"></a>重逢</h1><p>小学，吃鸡的风潮席卷全球，大伙都在聊着绝地求生，CSGO 却默默无闻。</p><p>初中，也尝试着和朋友一起玩 PUBG，有一日，他突然问我打不打 CSGO。</p><p>一发不可收拾。</p><p>我不知道自己打了多少局白银段的对局，也不知道自己起过多少次<strong>内格夫</strong>和 <strong>PP-野牛</strong>。但是从此之后，我再也没放下他。</p><p>我买了人生中第一款皮肤。</p><p>很早的时候，我曾经掉落过一把皮肤，但我天真的以为如果我装备了皮肤，他的磨损值会不断下降，直到完全磨损。因此 2019 年之前我从来没用过皮肤。</p><p>从初一打到高二，虽然中途有短暂的退游，却依旧在电脑上保留着他，他成为了我和朋友交流的一大方式。我依旧记得段位机制更新后我升上黄金的感动；在 Nuke 打出 1V5 残局队友的赞美（<a href="https://www.bilibili.com/video/BV1aM411i7Tw">点我去看</a>）</p><p>我买过很多把刀，但都是比较普通的折叠刀。2023 年春节，我下定决心，花了 1980 元买了一把<strong>折叠刀 | 多普勒 （崭新出厂）[Phase 1]</strong></p><p>后来，又陆续地添置了印花集 UPS、沙漠之鹰和一个手套。</p><p><img src="/2023/hello-counter-strike-2/The-Teenagers-First-Knife.jpg" alt="&quot;The Teenagers&#39; First Knife&quot;"></p><h1 id="明天-，后天-？"><a href="#明天-，后天-？" class="headerlink" title="明天 _ _ _ ，后天 _ _ _ ？"></a>明天 _ _ _ ，后天 _ _ _ ？</h1><p>2023 年 3 月 23 日，V 社公布了基于起源二引擎打造的 CS2。</p><p>你要问我，那一日我记忆犹新的，居然是皮肤交易市场。年初我 1980 买的刀，一夜之间涨到 4000 元（求购）。</p><p>随后就是长时间地等待资格，实际上直到最后一次大规模发放资格时我才收到了邀请。</p><p>游玩了一段时间的 CS2，感觉枪械手感、Sub-Tick 等的调教有待加强，不过谁还不是 1.6 遗老了呢？</p><p><img src="/2023/hello-counter-strike-2/limitest.webp" alt="CS2 Limit Test"></p><h1 id="永远怀念"><a href="#永远怀念" class="headerlink" title="永远怀念"></a>永远怀念</h1><p>或许我有些矫情，但我昨晚熬夜到 1 点，等着 CS2 的发布。但当我早上起来，看见库中的<strong>Counter-Strike : Global Offensive</strong> 变成了 <strong>Counter-Strike 2</strong>。看着 CSGO 国服发的<a href="https://www.bilibili.com/video/BV1PC4y1o7So">《这，就是反恐精英》</a>，依旧感觉有些许伤感。</p><blockquote><p>我们终会理解那些依旧在玩 1.6 的人</p></blockquote><p>时代在进步，技术在发展。一款 11 年前的游戏终将被取代。11 年，不长，但是一个人的青春。11 年，有多少人在等着起源二的上线呢？11 年，后天也变成了今天。一眼之间，我们已迈入全新的战场。</p><p>2018 年 10 月 4 日，一个不知名的小网站，上传了一篇名为<a href="https://www.rushb.net/csgo-update-2018-10-4.html">《CSGO 2018 年 10 月 4 日更新日志【人物重制】》</a>的文章</p><p>从此，这个网站就记录了 CSGO 的所有更新记录、地图彩蛋、选手配置、地图推荐，直到</p><p>嗨，B 哥，今天 CS2 上线了，你在那边见到了吗？</p><p><img src="/2023/hello-counter-strike-2/rip_rushb.webp" alt="R.I.P. - RushB"></p><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%9D%82%E8%B0%88/">杂谈</category>
      
      
      
      <comments>https://yurik.cafe/2023/hello-counter-strike-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」写一篇博客吧</title>
      <link>https://yurik.cafe/2023/miscellanies-2/</link>
      <guid>https://yurik.cafe/2023/miscellanies-2/</guid>
      <pubDate>Sat, 16 Sep 2023 09:33:04 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;你们这些孩子哪里是真为了写博客。&lt;/p&gt;
&lt;p&gt;你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。&lt;/p&gt;
&lt;p&gt;—— dboy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开篇聊聊天&quot;&gt;&lt;a href=&quot;#</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>你们这些孩子哪里是真为了写博客。</p><p>你们只是想体会换新工具的愉快感觉，顺便体会一下否定掉旧工具，觉得自己特别的小欣喜。</p><p>—— dboy</p></blockquote><h1 id="开篇聊聊天"><a href="#开篇聊聊天" class="headerlink" title="开篇聊聊天"></a>开篇聊聊天</h1><p>2018 年，可能是我捣鼓这些站点的起点，<code>imjinglan.cn</code>这个域名，是我注册的第一个域名，也是我第一个博客的地址。</p><p>正如我开头所引用的话一样，那是一个不断尝试的年级，Wordpress、Typecho 都试过，还用过更多的主题。重装了很多次站点。</p><p>众多博客，却没有留下一点记忆，所写的文章如今早已没有了印象。</p><p>自 2022 年 2 月 10 日，我使用 Hugo 搭建静态博客，再到 2023 年使用 Hexo 重构了现在的博客，已经过去了 583 天，该纪录保持至今</p><p>今日突发奇想，写一篇文章，聊聊博客本身</p><h1 id="保持写作"><a href="#保持写作" class="headerlink" title="保持写作"></a>保持写作</h1><p>我是怎么保持写博客的习惯的？说实话，<strong>我也不知道</strong></p><p>我喜欢炫耀，和别人炫耀我的博客。尽管这样子引流屁用没有 QAQ。但这样做我就会记得我有个博客（这很重要！）</p><p>其次，博客文章最重要的就是选题，自己的博客当然想写啥就写啥了。在学校的时候我喜欢拿着一个小笔记本在上面记着我的文章草稿，周末回家了直接照着打就好了</p><h1 id="一些写作小习惯"><a href="#一些写作小习惯" class="headerlink" title="一些写作小习惯"></a>一些写作小习惯</h1><p>在写博客中，我也养成了一些自认为比较好的书写习惯，分享给大家</p><ol><li><p>对于中文引号，我更加偏向于使用直角引号<strong>「」『』</strong>，这样在屏幕阅读中会更加易读</p></li><li><p>除了需要多张截图的技术文章，我基本坚持了每个一级标题末放一张图的习惯（如 <a href="/2023/ipod-classic-review">『iPod Classic 上手』</a> 和 <a href="/2023/YGR-Raft">『Raft 木筏评测』</a> ），这种方法使得行文阅读更加连续</p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这个博客大概会一直写下去的吧。。。是吧。。</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2023/miscellanies-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「开箱」iPod Classic 上手 : 优雅永不过时</title>
      <link>https://yurik.cafe/2023/ipod-classic-review/</link>
      <guid>https://yurik.cafe/2023/ipod-classic-review/</guid>
      <pubDate>Thu, 14 Sep 2023 10:15:53 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;终于下定决心写这篇文章了, 截至文章截稿，iPod Classic 陪着我走完了艰难的初三时光。随着我进入高中，每日骑车上学，iPod Cl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>终于下定决心写这篇文章了, 截至文章截稿，iPod Classic 陪着我走完了艰难的初三时光。随着我进入高中，每日骑车上学，iPod Classic 也成为了我背包的必备单品。</p><p>回想起来，似乎我从没有为他写过一篇评测（或许以前有过，但当他不存在吧）</p><p>虽然 iPod Classic 可以通过刷 Rockbox 达到原系统做不到的效果，但本文更想偏重于原版系统的体验</p><h1 id="精心设计，浑然天成"><a href="#精心设计，浑然天成" class="headerlink" title="精心设计，浑然天成"></a>精心设计，浑然天成</h1><p>一块金属正面，一块亮面不锈钢背板，中间镶嵌着 Click Wheel 和一块 2.5 英寸的 LCD 彩色显示屏，这便是我手上的 iPod Classic</p><p>我选择的是黑色的版本，沉稳，耐用是我对它的感受</p><p>尽管乔布斯说：「每一台 iPod 的划痕都是独一无二的」，我还是给他的背壳贴上了一层保护膜，以及一块早已被磨花的亚克力外壳（还好不是不锈钢边框）</p><p><img src="/2023/ipod-classic-review/IMG_0008.jpg" alt="iPod Classic 背板，贴上了一层保护膜"></p><h1 id="你好-Click-Wheel"><a href="#你好-Click-Wheel" class="headerlink" title="你好, Click Wheel !"></a>你好, Click Wheel !</h1><p>或许你已经久仰大名，但当你第一次上手时仍会感到这项设计的精妙。一转一点，刷新了人们对于音乐的理解。</p><p>在普通 MP3 只有几 MB 存储容量时，iPod 拥有惊人的 5GB 容量，而我手上的 iPod Classic 经过改装竟然可以高达 160GB，足以装下你一生中所有的歌曲。</p><p>那么传统的按键式列表操作便不再合适。于是圆盘 Click Wheel 便诞生了，可以说 iPod 的大容量成就了 Click Wheel，Click Wheel 也成就了 iPod</p><p>如果你需要切换项目，只需要将手指放在圆环上，轻轻转动，便可以看见项目的切换，配合着 iPod Classic 模拟的音效，好似实体的段落感的感觉是一种全新的操作体验</p><p>搭配 Cover Flow，你还可以实现类似于在多张专辑中挑选心仪唱片的感觉</p><p><img src="/2023/ipod-classic-review/IMG_0001.jpg" alt="Cover Flow"></p><h1 id="需要适应的音频管理方式"><a href="#需要适应的音频管理方式" class="headerlink" title="需要适应的音频管理方式"></a>需要适应的音频管理方式</h1><p>让我们请出 iTunes!</p><p>苹果将把音乐导入 iPod 的行为称为 「同步」，你需要先将音乐拖进 iTunes 中后再同步才能将音乐导入到 iPod 中。同时现在许多主流格式居然不支持，如 FLAC</p><p>我一般会使用 foobar2000 将所有格式转换为 <a href="https://macosforge.github.io/alac/">Apple Lossless Audio Codec (ALAC)</a> 格式后导入</p><p>不同于网络上他人对这个特性的吐槽，我个人还是比较喜欢使用 iTunes 的，他使得我整理专辑更加高效了</p><p>需要注意的是，如果你是导入本地音频的话，更换计算机或者重装系统后在新设备上同步将会<strong>失去旧设备同步的所有歌曲！注意备份！</strong></p><p>我一般是通过家庭存储服务器搭配 Syncthing 同步管理歌曲</p><p><img src="/2023/ipod-classic-review/IMG_0002.jpg" alt="iTunes"></p><h1 id="戴上耳机，倾听她"><a href="#戴上耳机，倾听她" class="headerlink" title="戴上耳机，倾听她"></a>戴上耳机，倾听她</h1><p>作为一款数字音乐播放器，怎么能错过音乐？</p><p>iPod Classic 的是一台简单易用的前端，也是捆绑的主力之一。在日常出行中，即使不用外置解码器也十分出色。最高 32Ω 的阻抗足以推动大部分耳机</p><p>我手上的这台 iPod Classic 改装了固态硬盘，在快速读取音乐的同时塞进了更大的电池。</p><p>我每日上下学骑车时都会使用它，如果注意不使用时暂停播放（当你拔出耳机时会自动暂停，但我有时会误触），可以使用两个月之久。连续播放时长估计在 30 小时左右</p><p>纯粹的听歌体验，没有续航焦虑，这些都使得 iPod 成为了我外出时的必备单品</p><p><img src="/2023/ipod-classic-review/IMG_0006.jpg" alt="iPod Classic"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p><strong>「如果计算机成为一个中心，还可以使便携式设备变得更简单。」</strong></p><p>2000 年左右，乔布斯着手用苹果电脑打入音乐市场，推出了 iTunes 音乐软件，所有苹果电脑用户可以免费使用该软件，而这仅仅是推动数字中枢战略的第一步。</p><p>下一步便是制造一个便携式音乐播放器。乔布斯意识到，苹果可以设计一个和 iTunes 配套的设备，让收听音乐变得更加简单。由计算机来完成复杂的任务，而音乐播放器的功能要简单。iPod 因此而诞生了。</p><p>iPod 代表了苹果品牌的核心价值——诗意与工程紧密相连，艺术、创意和科技完美结合，设计风格既醒目又简洁。</p><p>如果你问我：「<strong>2023 年了,iPod Classic 还值得买吗？</strong>」</p><p>我会回答：「<strong>如果你想，买下他吧，别忘了享受音乐</strong>」</p><p><img src="/2023/ipod-classic-review/banner.png" alt="iPod Classic"></p><blockquote><p>写于 2023 年 9 月 14 日 , 柳州</p></blockquote>]]></content:encoded>
      
      
      
      
      <comments>https://yurik.cafe/2023/ipod-classic-review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」将博客主页封面修改为随机图片</title>
      <link>https://yurik.cafe/2023/fluid-random-index-img/</link>
      <guid>https://yurik.cafe/2023/fluid-random-index-img/</guid>
      <pubDate>Tue, 12 Sep 2023 04:27:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Fluid 是一款很好用的 Hexo 主题，但他默认的主页封面并不能做到多张图片随机。于是我决定魔改他&lt;/p&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Fluid 是一款很好用的 Hexo 主题，但他默认的主页封面并不能做到多张图片随机。于是我决定魔改他</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>通过查看 <code>layout/index.ejs</code> 文件可以看出 index_img 的定义为<code>index_img = post.cover || theme.post.default_cover</code></p><p>我们只需要将 <code>theme.post.default_cover</code> 改为数字外加随机数取出就好了</p><p>而 ejs 支持 js 的 Math.random 语法，稍微学习 Javascript 就可以修改了</p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>进入 <code>主题文件夹/layout</code>，打开<code>index.ejs</code></p><p>搜索 <code>theme.post.default_cover</code></p><p>将其修改成 <code>theme.post.default_cover[Math.floor(Math.random() * (theme.post.default_cover.length))]</code></p><p>修改 Fluid 的配置文件 <strong>_config.fluid.yml</strong></p><p>将 <strong>default_index_img</strong> 配置项修改为这样</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">default_index_img:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">此处为图片链接</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">此处为图片链接</span><br></code></pre></td></tr></table></figure><p>重新部署就好啦！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我同时也修改了 Fluid 的封面命名规则，这样子只需要设置一次封面属性就可以同时应用到 index_img 和 banner_img 啦</p><p><del>我也将修改后的主题改名为 Farbic 开源在 Github 仓库中 <strong>Rabbit-Clan&#x2F;hexo-theme-farbic</strong>，欢迎 Star + Fork</del></p><p><del>Farbic 主题还重新修改了部分页面的配置方式，使配置方式更加直观</del></p><p><del>只是还没来得及编写文档，可能安装后会出现无法使用的情况</del></p><p>2023.09.14 : 由于技术原因，暂时不单独提供修改的主题，您可以前往本博客仓库自行克隆后提取</p><p><strong>修改后的主题仍遵循 GPL 协议公开！</strong></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2023/fluid-random-index-img/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「YGR」Raft 木筏 - 你也想在海上捡垃圾吗</title>
      <link>https://yurik.cafe/2023/YGR-Raft/</link>
      <guid>https://yurik.cafe/2023/YGR-Raft/</guid>
      <pubDate>Sun, 10 Sep 2023 04:33:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2023/YGR-Raft/cover.webp&quot; alt=&quot;《Raft木筏》&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;有趣的物资收集系统&quot;&gt;&lt;a href=&quot;#有趣的物资收集系统&quot; class=&quot;headerlink&quot; title=&quot;有趣的物资收集系统&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2023/YGR-Raft/cover.webp" alt="《Raft木筏》"></p><h1 id="有趣的物资收集系统"><a href="#有趣的物资收集系统" class="headerlink" title="有趣的物资收集系统"></a>有趣的物资收集系统</h1><p>在木筏中，玩家出生时将会获得一个塑料勾。通过塑料勾你可以勾取到漂在洋面的材料：木板、塑料、棕榈叶等等，海面上还会刷新出包含隐藏物资的木桶，里面包含着较为丰富的奖励（当然这也取决于你是否幸运）</p><p>塑料勾和金属勾同时也是在海底挖掘矿石、石头的工具</p><p>当你较为深入地游玩 Raft 后，你会学习如何制作 <strong>收集网</strong> 。收集网将会帮你自动拾取网下的物品，你只需要定期清理即可</p><p>于此同时，游戏中还存在着鱼竿、斧头、铲子等工具，你可以使用它们来钓鱼（也有可能是臭皮靴），砍伐岛上的树木、挖取污泥等</p><p><img src="/2023/YGR-Raft/screenshot_1.jpg" alt="收集网"></p><h1 id="基于地点转换的剧情"><a href="#基于地点转换的剧情" class="headerlink" title="基于地点转换的剧情"></a>基于地点转换的剧情</h1><p>当你在海上茫无目的的漂荡时，你可能会在木桶中获得 <strong>接收器</strong> 和 <strong>天线</strong> 的蓝图，当你按照要求连接好天线（这个过程是自动的）后，你的接收器上将会出现一个信号点，这便是你所要探索的第一个剧情区域</p><p>当你探索玩一个区域后，你将会获得一个写着一串四位数字的纸条，按照纸条上的数字调整接收器，便可以根据信号指引到下一个区域</p><p><img src="/2023/YGR-Raft/screenshot_2.jpg" alt="接收器"></p><h1 id="丰富的探索元素"><a href="#丰富的探索元素" class="headerlink" title="丰富的探索元素"></a>丰富的探索元素</h1><p>每一个剧情区域都有丰富的探索元素。在探索路上，你将会见到很多字条，捡起字条后会自动播放相关语音。通过这些语音，你或许可以理解关于剧情的一些细节</p><p>除此之外，信号塔后的剧情区域都十分巨大，无论是大篷车镇还是唐加罗瓦号，在其中探索将会花费你大量的时间，注意！</p><p>在航行的过程中，接收器上也会出现一些蓝色的小点，这些便是大型岛屿上的交易站，在其中你可以通过交易获得高级鱼饵及一些稀有物品！</p><p>交易站中没有 NPC，但你可以让你的朋友钻入其中并截图，这很有趣！</p><p><img src="/2023/YGR-Raft/screenshot_10.jpg" alt="交易站"></p><h1 id="强大的建筑系统"><a href="#强大的建筑系统" class="headerlink" title="强大的建筑系统"></a>强大的建筑系统</h1><p>你可以随心所欲地修建你的木筏！你可以把它改造成一艘巨轮，也可以天马行空地搭建出一个只有 4 块底板的天空之城。</p><p>木筏给玩家提供了丰富的材质，如木板、高级木板（这个消耗材料更多）、棕榈叶。同时，你还可以使用刷子给自己的墙体上漆（颜料需要通过花朵与染料厂获取）</p><p>各种自动化的设备（你后期甚至可以建造全自动净化器）使你的木筏化身全能海上城市。你还可以在船上搭建自己的种植园</p><p><img src="/2023/YGR-Raft/screenshot_4.jpg" alt="我们的木筏"></p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>木筏是一款好游戏，他也非常适合朋友间进行联机游玩，但我们认为他还是存在一些缺点</p><ol><li><p><strong>存在穿模、卡入地底等 BUG。</strong></p><p>有一次游玩时，在乘坐唐加罗瓦电梯时我们突然掉入电梯下方空间，无法操作，只能通过生命值减少来重生，同时我们也丧失了我们大部分物资</p></li><li><p><strong>部分物件摆放有待加强</strong></p><p>我们还是期待如管道可穿墙（虽然这个可以通过 BUG 做到，但十分不优雅）、引擎的注油口可以镜像对称(再见了，烦人的走线)</p></li><li><p><strong>种植物种子掉落概率低</strong></p><p>在小概率情况下，收获果实才会掉落种子（至少我们掉落的种子永远不够下一次种植），或许这样并不合理？</p></li><li><p><strong>光照渲染</strong></p><p>在天黑与天亮的转换过程中，游戏中的灯光可能会<strong>短暂失效</strong>，并且自然环境对于全封闭室内灯光居然存在影响！</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>木筏的创意是无与伦比的，在海上收集物资的想法也很酷！探索元素、BOSS 战斗等使得游戏在休闲中仍然保持着一丝肾上腺素飙升的快感</p><p>诚然，开发商<strong>Redbeet Interactive</strong>实力距离超一线大厂还是有所差距，我们在游玩时还是遇到了部分痛点，不过这些都可以算是不痛不痒的特性吧</p><p>如果你想和朋友一同体验海上捡垃圾的快乐，享受建造的乐趣，一同搭建自己的木筏的话，<strong>《Raft 木筏》</strong> 值得一试</p><h1 id="YGR-评分"><a href="#YGR-评分" class="headerlink" title="YGR 评分"></a>YGR 评分</h1><p>《Raft 木筏》 YGR 评分为 <strong>7.2</strong> 分</p><p><img src="/2023/YGR-Raft/Rating.png" alt="Rating"></p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/ygr/">Yurik&#39;s Game Rating</category>
      
      
      <category domain="https://yurik.cafe/tags/%E6%B8%B8%E6%88%8F/">游戏</category>
      
      <category domain="https://yurik.cafe/tags/%E6%B5%8B%E8%AF%84/">测评</category>
      
      <category domain="https://yurik.cafe/tags/YGR/">YGR</category>
      
      
      <comments>https://yurik.cafe/2023/YGR-Raft/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「YGR」Yurik’s Game Rating 简介</title>
      <link>https://yurik.cafe/2023/YGM-Introduce/</link>
      <guid>https://yurik.cafe/2023/YGM-Introduce/</guid>
      <pubDate>Sat, 09 Sep 2023 05:22:49 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2023/YGM-Introduce/Cover.webp&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是-YGR&quot;&gt;&lt;a href=&quot;#什么是-YGR&quot; class=&quot;headerlink&quot; title=&quot;什么是 YGR&quot;&gt;&lt;/a&gt;什么是 YGR&lt;/h1&gt;&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2023/YGM-Introduce/Cover.webp"></p><h1 id="什么是-YGR"><a href="#什么是-YGR" class="headerlink" title="什么是 YGR"></a>什么是 YGR</h1><p><strong>Yurik’s Game Rating</strong> 是由 景蓝 Yurik 发起的游戏评分测评栏目</p><p>在 <strong>YGR</strong> 中，我们将会对我们玩过的进行评测并通过特定的标准进行评分</p><p>我们将通过普通玩家视角带你了解这款游戏</p><blockquote><p>评分仅代表 <strong>景蓝 Yurik</strong> 及 参与评测的成员 的观点</p></blockquote><h1 id="为什么创办-Yurik’s-Game-Rating"><a href="#为什么创办-Yurik’s-Game-Rating" class="headerlink" title="为什么创办 Yurik’s Game Rating ?"></a>为什么创办 <strong>Yurik’s Game Rating</strong> ?</h1><p>诚然，已经有类似于 IGN | GS | 游民评测 等知名打牌的测评团队，但我任希望在自己的博客中开一个评测栏目。由此表达我游玩该游戏的感受与思考</p><h1 id="怎么访问-Yurik’s-Game-Rating"><a href="#怎么访问-Yurik’s-Game-Rating" class="headerlink" title="怎么访问 Yurik’s Game Rating ?"></a>怎么访问 <strong>Yurik’s Game Rating</strong> ?</h1><p>你可以访问 <a href="/categories/Yurik-s-Game-Rating/"><strong>分类-Yurik’s Game Rating</strong></a> 来获取关于<strong>Yurik’s Game Rating</strong>的有关内容</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/ygr/">Yurik&#39;s Game Rating</category>
      
      
      <category domain="https://yurik.cafe/tags/%E6%B8%B8%E6%88%8F/">游戏</category>
      
      <category domain="https://yurik.cafe/tags/%E6%B5%8B%E8%AF%84/">测评</category>
      
      <category domain="https://yurik.cafe/tags/YGR/">YGR</category>
      
      
      <comments>https://yurik.cafe/2023/YGM-Introduce/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「随笔」记于 17 岁生日前</title>
      <link>https://yurik.cafe/2023/miscellanies-1/</link>
      <guid>https://yurik.cafe/2023/miscellanies-1/</guid>
      <pubDate>Fri, 03 Mar 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;记于 17 岁生日前 3 天&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这世界有那么个人 活在我飞扬的青春&lt;/p&gt;
&lt;p&gt;在泪水里浸湿过的长吻&lt;/p&gt;
&lt;p&gt;常让我想啊想出神。&lt;/p&gt;
&lt;p&gt;—— 这世界有那么多人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;琐记，为了保持行文</description>
        
      
      
      
      <content:encoded><![CDATA[<p>记于 17 岁生日前 3 天</p><blockquote><p>这世界有那么个人 活在我飞扬的青春</p><p>在泪水里浸湿过的长吻</p><p>常让我想啊想出神。</p><p>—— 这世界有那么多人</p></blockquote><p>琐记，为了保持行文的统一，我还是称它为杂记吧</p><p>有很多东西，在记忆中，用空间发出感到矫情，憋在心里略显可惜，写一篇博客，在这片互联网孤岛中保留痕迹······</p><p>行文混乱，只供一笑尔</p><h1 id="笔"><a href="#笔" class="headerlink" title="笔"></a>笔</h1><p>第一个故事，要从笔开始 我不是一个文具控，甚至在初中（准确来说是初三）前对文具一无所知。对笔的态度更是能写就行</p><p>一支按动中性笔，晨光的 AGPH8004，.38mm 的 ST 笔尖，是我那时最喜欢的一支.38mm 笔，来自我的同桌，这大概是我第一次对笔有深入的认识吧。虽然后面都没有找到我心心念念的 ST 笔尖的笔了 OWO。</p><p>后来换同桌后又向新同桌<del>借用</del>买了一支 Pilot 的 Juice 黑色，喜欢上了日产笔尖在顺滑与阻尼之间的平衡。<del>就是太贵了</del>上高中前都没在用了。</p><p>上了高中后，手头富裕了（<del>家里给钱了</del>），便买了一些牌子的笔，有百乐的 Juice, Juice Up,斑马的 SARASA，KACO 的 ROCKET,现在还是使用 JUICE UP 作为主力笔，因为 ST 笔尖吧（</p><p>为什么想要写这么一段，可能是对老友的思念，对时光的感慨。这真的是令人怀念过去的一年。</p>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/thoughts/">随笔</category>
      
      
      
      <comments>https://yurik.cafe/2023/miscellanies-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「技术」使用Vercel托管静态网页</title>
      <link>https://yurik.cafe/2023/use-vercel-introduction/</link>
      <guid>https://yurik.cafe/2023/use-vercel-introduction/</guid>
      <pubDate>Sun, 22 Jan 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Vercel 是一个前端页面托管服务网站，用户可以在上面托管部署多个前端框架的项目&lt;/p&gt;
&lt;p&gt;当然，Vercel 也可以直接托管 Htm</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vercel 是一个前端页面托管服务网站，用户可以在上面托管部署多个前端框架的项目</p><p>当然，Vercel 也可以直接托管 Html 静态站点，并且 Vercel 的访问速度优于 Github Pages</p><p><img src="/2023/use-vercel-introduction/speed-compair.png" alt="速度对比"></p><p>写这篇文章的想法来源于两个，一是之前发布的 Hugo 博客部署有一半烂尾了（懒.jpg）, 还有一点就是 Norphin 的博客在他自己自定义后使用了一张 3.04Mb 左右的背景图片，由于他使用 frp 服务+香港节点建站，使得整张图片我加载了大约 10s。于是决定教教他怎么使用 vercel 来规避一些流量损耗。</p><blockquote><p>BTW: 他的背景图是 4K 的，其实一般来说 1080p 到 2k 就差不多了，不必要上传那么大的图片的说…</p></blockquote><h1 id="注册-Vercel"><a href="#注册-Vercel" class="headerlink" title="注册 Vercel"></a>注册 Vercel</h1><p>Vercel 的注册过程很简单，你可以直接使用自己的 GitHub、GitLab、BitBucket 账户直接登录，在本文中就不再过多赘述</p><h1 id="使用-Vercel"><a href="#使用-Vercel" class="headerlink" title="使用 Vercel"></a>使用 Vercel</h1><p>首先在 Github 或者 GitLab 账户（下文简称<strong>你的账户</strong>）中新建一个 Git 仓库，随后将自己的静态文件 Git 提交至仓库内</p><p>接着在 Vercel 中点击 **Add New..**，或者访问<a href="https://vercel.com/new">这个网址</a>。连接你的你的账户，选择先前新建的仓库，点击 Import</p><p>设置你的<strong>Project Name</strong>, 如果你单纯的想要托管 Html 文档和静态资源的话 框架预设(Framework Preset)就选 <strong>Other</strong> 就好了</p><p>点击 部署(Deploy) 后稍等片刻, 你的项目就部署完成</p><h1 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h1><p>Vercel 会在部署项目时提供一个 <strong>.vercel.app</strong> 结尾的二级域名，但由于某些特殊原因，vercel.app 域名可能会无法访问，这时候你就需要一个自己的域名（域名注册方法自行使用搜索引擎搜索）</p><p>在<a href="https://vercel.com/dashboard">Dashboard</a>中点击进入你刚刚部署的项目，点击上方的 Setting 进入设置页面，在左侧边栏进入<strong>Domains(域名)<strong>页面，在输入框中输入你想要的域名, 点击</strong>Add</strong>后按照提示在 DNS 中设置记录，返回域名管理页面点击**Refresh(刷新)**使其检测记录是否生效并注册 SSL 证书即可。</p><blockquote><p>值得注意的是，如果你添加的是一个 www 或者根域名，如 <a href="http://www.yurik.cafe/">www.yurik.cafe</a> 或者 yurik.cafe，Vercel 会跳出提示询问你是选择将 www 域名重定向至根域名还是根域名重定向至 www 域名，抑或是单纯添加你输入的域名，你可以根据自身情况选择。</p><p>Vercel 推荐你将 www 域名重定向至根域名</p></blockquote><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>按照<strong>域名&#x2F;路径&#x2F;文件名</strong>访问即可</p><blockquote><p>Vercel 会自动为域名注册一个免费的 SSL 证书，所以你可以使用 https 访问</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://yurik.cafe/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      
      <comments>https://yurik.cafe/2023/use-vercel-introduction/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
